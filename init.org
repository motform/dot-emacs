#+TITLE: .emacs — est 2019
#+AUTHOR: Motform
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* Introduction
  It is not every day that you sit down to write an introduction to your software configuration. Yet, here we are. My take on Emacs tires to be equally pragmatic and rhizomatic. Each line should be read the greater context, encapsulation is the ultimate lie.

  Learning Emacs is quite the task/lifestyle, so in order to keep things manageable I only include things code and features that I understand. This code is only tested against [[.https://bitbucket.org/mituharu/emacs-mac/src/master/][Emacs Mac Port]] The structure of this literate .emacs is forked from [[https://github.com/larstvei/dot-emacs][larstvei’s excellent config]].

* Initialization
** Meta
   ~NOTE: This section is a straight copy from larsveti’s config.~

   When this configuration is loaded for the first time, the =init.el= is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; This file replaces itself with the actual configuration at first run.

   ;; We can't tangle without org!
   (require 'org)
   ;; Open the configuration
   (find-file (concat user-emacs-directory "init.org"))
   ;; tangle it
   (org-babel-tangle)
   ;; load it
   (load-file (concat user-emacs-directory "init.el"))
   ;; finally byte-compile it
   (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   Lexical scoping for the init-file is needed, it can be specified in the
   header. This is the first line of the actual configuration:

   #+BEGIN_SRC emacs-lisp
   ;;; -*- lexical-binding: t -*-
   #+END_SRC

   Tangle and compile this file on save automatically:

   #+BEGIN_SRC emacs-lisp
   (defun tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el")))))

   (add-hook 'after-save-hook 'tangle-init)
   (package-initialize)
   #+END_SRC

** Startup tweaks
   Startup tweaks curtesy of ambrevar.

   #+BEGIN_SRC emacs-lisp
   (defun ambrevar/reset-gc-cons-threshold ()
     (setq gc-cons-threshold (car (get 'gc-cons-threshold 'standard-value))))
   (setq gc-cons-threshold (* 64 1024 1024))
   (add-hook 'after-init-hook 'ambrevar/reset-gc-cons-threshold)

   (setq default-file-name-handler-alist file-name-handler-alist)
   (setq file-name-handler-alist nil)
   (defun ambrevar/reset-file-name-handler-alist ()
     (setq file-name-handler-alist default-file-name-handler-alist))
   (add-hook 'focus-out-hook #'garbage-collect)  ;; Garbage collect on focus out

   (add-hook 'after-init-hook 'ambrevar/reset-file-name-handler-alist)
   #+END_SRC

   More tweaks to increase speed, this time by mucking with the caches.

   #+BEGIN_SRC emacs-lisp
   ;; Speed up icon caches
   (setq inhibit-compacting-font-caches t)

   ;; Improve theme loading
   (defadvice load-theme (before clear-previous-themes activate)
     "Clear existing theme settings instead of layering them"
     (mapc #'disable-theme custom-enabled-themes))

   (setq ad-redefinition-action 'accept)

   (setq gc-cons-threshold 100000000) ; make gc go on 100mb
   #+END_SRC

** Melpa
   Straight from the Melpa docs. Some Emacs distros (like mituharu’s mac-port) complain when you manually initialize package, so there is that.

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                       (not (gnutls-available-p))))
          (proto (if no-ssl "http" "https")))
     (when no-ssl
       (warn "You version of Emacs does not support SSL!"))
     ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
     (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
     ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
     (when (< emacs-major-version 24)
       ;; For important compatibility libraries like cl-lib
       (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
   #+END_SRC

** Use-package
   Use package is a fantastic plug-in that provides a generalised interface for plug-in management. These lines should install, enable and download the things required for this config to work, but I have yet to really test that.

   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

   (use-package try
     :ensure t)

   (use-package use-package
     :config
     (setq use-package-always-ensure t)
     (use-package auto-compile
       :config (auto-compile-on-load-mode))

     (setq load-prefer-newer t))
   #+END_SRC

** Encoding
   Oh Unicode I love you, but you are breaking my heart. This should cover all of the relevant cases, but we all know that is ultimately a lie.

   #+BEGIN_SRC emacs-lisp
   (set-language-environment "UTF-8")
   (prefer-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   #+END_SRC

** PATH
   GUI Emacs does not read your path variable by default. There are very “good” reasons for this behaviour, but it still sucks. This should sort that out.

  #+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/"))
  (setq exec-path (append exec-path '("/usr/local/bin/")))
  (setq exec-path (append exec-path '("~/.cabal/bin")))
  (setq exec-path (append exec-path '("~/Library/Spelling")))
  (setq exec-path (append exec-path '("~/.local/bin")))
  (setq exec-path (append exec-path '("/Users/motform/.pyenv/versions/emacs/bin")))

  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize)))
  #+END_SRC

* Backups and file management
  While not Emacs exclusive, ~save-place-mode~ neatly illustrates a potential of software that is more about process than static files. It is a simple variable that when true, remembers your where you left off when you last worked something, and puts you there. That’s it! Dead simple, yet surprisingly remarkable.

  #+BEGIN_SRC emacs-lisp
  (save-place-mode 1) ;; Save recent
  ;; Sane backups
  (setq backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

  ;; (global-auto-revert-mode) ; useful but seems to eat a lot of cpu

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)

  (setq create-lockfiles nil)
  #+END_SRC

* Look and Feel
** Start screen
   Most important part of the config. 

   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)  ; No start screen
   (setf initial-buffer-choice "~/.emacs.d/numogram.txt")
   #+END_SRC

** Icons
   All the icons! 

   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons)

   (use-package all-the-icons-dired
     :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

   (use-package all-the-icons-ivy
     :config
     (setq all-the-icons-ivy-file-commands
           '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
     (all-the-icons-ivy-setup))
   #+END_SRC

** Theme
   Look, I made my own theme! Screenshots and explanation can be found in its [[https://github.com/motform/stimmung][repo]].

   #+BEGIN_SRC emacs-lisp
   (load "~/Projects/stimmung/stimmung-theme.el")
   (add-to-list 'custom-theme-load-path "~/Projects/stimmung/")
   (load-theme 'stimmung t)
   #+END_SRC

** Modeline
   Every time I go into the ~messages~ buffer, I get pleasantly surprised at how nice the OG modeline looks. Then I come back to the doomline and wow do I not miss having all my minor modes constantly visible.

   #+BEGIN_SRC emacs-lisp 
   (use-package doom-modeline
     :hook (after-init . doom-modeline-mode)
     :config
     (setq column-number-mode t)
     (setq doom-modeline-buffer-encoding nil)
     (setq doom-modeline-evil-state-icon nil))
   #+END_SRC

** Prism 
   Prism mode highlights by nesting rather than syntax.

   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package prism
     :config
     (add-hook 'prog-mode-hook 'prism-mode)

     ;; faces used with prism
     (custom-set-faces
      '(font-lock-function-name-face ((t (:bold t))))
      '(font-lock-keyword-face ((t (:bold t))))
      '(font-lock-negation-char-face ((t (:bold t))))
      '(font-lock-variable-name-face ((t (:italic t))))))
   #+END_SRC

** Typography
   For a typophile, this is the most important part of the config. After all, Emacs is really nothing but text, so why settle for anything but the best? The best in this case, is probably [[https://www.fsd.it/shop/fonts/pragmatapro/][Pragmata Pro by Fabrizio Schiavi]]. It’s not as fun as Operator, nor as cosy as Input, but damn if it is not the most comprehensive typeface this side of… well anything. The condensed look took some getting used to, but once you are used to it, you cannot live without it. If the price tag is too big for you, I recommend Inconsolata as a replacement.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'default-frame-alist '(font . "PragmataPro Liga"))
   (set-face-attribute 'default nil :family "PragmataPro Liga" :height 120)
   (set-face-attribute 'fixed-pitch nil :family "PragmataPro Liga" :height 120)
   (set-face-attribute 'variable-pitch nil :family "PragmataPro Liga" :height 120)
   #+END_SRC
   
   Emacs does not really support ligatures. The emacs-mac-port does, kinda, so I use that for most things.

   #+BEGIN_SRC emacs-lisp
   (setq prettify-symbols-unprettify-at-point 'right-edge)

   (defconst pragmatapro-prettify-symbols-alist
     (mapcar (lambda (s)
               `(,(car s)
                 .
                 ,(vconcat
                   (apply 'vconcat
                          (make-list
                           (- (length (car s)) 1)
                           (vector (decode-char 'ucs #X0020) '(Br . Bl))))
                   (vector (decode-char 'ucs (cadr s))))))
             '(("[ERROR]"    #XE2C0)
               ("[DEBUG]"    #XE2C1)
               ("[INFO]"     #XE2C2)
               ("[WARN]"     #XE2C3)
               ("[WARNING]"  #XE2C4)
               ("[ERR]"      #XE2C5)
               ("[FATAL]"    #XE2C6)
               ("[TRACE]"    #XE2C7)
               ("[FIXME]"    #XE2C8)
               ("[TODO]"     #XE2C9)
               ("[BUG]"      #XE2CA)
               ("[NOTE]"     #XE2CB)
               ("[HACK]"     #XE2CC)
               ("[MARK]"     #XE2CD)
               (";; ERROR"    #XE2C0)
               (";; DEBUG"    #XE2C1)
               (";; INFO"     #XE2C2)
               (";; WARN"     #XE2C3)
               (";; WARNING"  #XE2C4)
               (";; ERR"      #XE2C5)
               (";; FATAL"    #XE2C6)
               (";; TRACE"    #XE2C7)
               (";; FIXME"    #XE2C8)
               (";; TODO"     #XE2C9)
               (";; BUG"      #XE2CA)
               (";; NOTE"     #XE2CB)
               (";; HACK"     #XE2CC)
               (";; MARK"     #XE2CD)
               ("# ERROR"    #XE2F0)
               ("# DEBUG"    #XE2F1)
               ("# INFO"     #XE2F2)
               ("# WARN"     #XE2F3)
               ("# WARNING"  #XE2F4)
               ("# ERR"      #XE2F5)
               ("# FATAL"    #XE2F6)
               ("# TRACE"    #XE2F7)
               ("# FIXME"    #XE2F8)
               ("# TODO"     #XE2F9)
               ("# BUG"      #XE2FA)
               ("# NOTE"     #XE2FB)
               ("# HACK"     #XE2FC)
               ("# MARK"     #XE2FD)
               ("// ERROR"   #XE2E0)
               ("// DEBUG"   #XE2E1)
               ("// INFO"    #XE2E2)
               ("// WARN"    #XE2E3)
               ("// WARNING" #XE2E4)
               ("// ERR"     #XE2E5)
               ("// FATAL"   #XE2E6)
               ("// TRACE"   #XE2E7)
               ("// FIXME"   #XE2E8)
               ("// TODO"    #XE2E9)
               ("// BUG"     #XE2EA)
               ("// NOTE"    #XE2EB)
               ("// HACK"    #XE2EC)
               ("// MARK"    #XE2ED)
               ("!!"         #XE900)
               ("!="         #XE901)
               ("!=="        #XE902)
               ("!!!"        #XE903)
               ("!≡"         #XE904)
               ("!≡≡"        #XE905)
               ("!>"         #XE906)
               ("!=<"        #XE907)
               ("#("         #XE920)
               ("#_"         #XE921)
               ("#{"         #XE922)
               ("#?"         #XE923)
               ("#>"         #XE924)
               ("##"         #XE925)
               ("#_("        #XE926)
               ("%="         #XE930)
               ("%>"         #XE931)
               ("%>%"        #XE932)
               ("%<%"        #XE933)
               ("&%"         #XE940)
               ("&&"         #XE941)
               ("&*"         #XE942)
               ("&+"         #XE943)
               ("&-"         #XE944)
               ("&/"         #XE945)
               ("&="         #XE946)
               ("&&&"        #XE947)
               ("&>"         #XE948)
               ("$>"         #XE955)
               ("***"        #XE960)
               ("*="         #XE961)
               ("*/"         #XE962)
               ("*>"         #XE963)
               ("++"         #XE970)
               ("+++"        #XE971)
               ("+="         #XE972)
               ("+>"         #XE973)
               ("++="        #XE974)
               ("--"         #XE980)
               ("-<"         #XE981)
               ("-<<"        #XE982)
               ("-="         #XE983)
               ("->"         #XE984)
               ("->>"        #XE985)
               ("---"        #XE986)
               ("-->"        #XE987)
               ("-+-"        #XE988)
               ("-\\/"       #XE989)
               ("-|>"        #XE98A)
               ("-<|"        #XE98B)
               (".."         #XE990)
               ("..."        #XE991)
               ("..<"        #XE992)
               (".>"         #XE993)
               (".~"         #XE994)
               (".="         #XE995)
               ("/*"         #XE9A0)
               ("//"         #XE9A1)
               ("/>"         #XE9A2)
               ("/="         #XE9A3)
               ("/=="        #XE9A4)
               ("///"        #XE9A5)
               ("/**"        #XE9A6)
               (":::"        #XE9AF)
               ("::"         #XE9B0)
               (":="         #XE9B1)
               (":≡"         #XE9B2)
               (":>"         #XE9B3)
               (":=>"        #XE9B4)
               (":("         #XE9B5)
               (":-("        #XE9B6)
               (":)"         #XE9B7)
               (":-)"        #XE9B8)
               (":/"         #XE9B9)
               (":\\"        #XE9BA)
               (":3"         #XE9BB)
               (":D"         #XE9BC)
               (":P"         #XE9BD)
               (":>:"        #XE9BE)
               (":<:"        #XE9BF)
               ("<$>"        #XE9C0)
               ("<*"         #XE9C1)
               ("<*>"        #XE9C2)
               ("<+>"        #XE9C3)
               ("<-"         #XE9C4)
               ("<<"         #XE9C5)
               ("<<<"        #XE9C6)
               ("<<="        #XE9C7)
               ("<="         #XE9C8)
               ("<=>"        #XE9C9)
               ("<>"         #XE9CA)
               ("<|>"        #XE9CB)
               ("<<-"        #XE9CC)
               ("<|"         #XE9CD)
               ("<=<"        #XE9CE)
               ("<~"         #XE9CF)
               ("<~~"        #XE9D0)
               ("<<~"        #XE9D1)
               ("<$"         #XE9D2)
               ("<+"         #XE9D3)
               ("<!>"        #XE9D4)
               ("<@>"        #XE9D5)
               ("<#>"        #XE9D6)
               ("<%>"        #XE9D7)
               ("<^>"        #XE9D8)
               ("<&>"        #XE9D9)
               ("<?>"        #XE9DA)
               ("<.>"        #XE9DB)
               ("</>"        #XE9DC)
               ("<\\>"       #XE9DD)
               ("<\">"       #XE9DE)
               ("<:>"        #XE9DF)
               ("<~>"        #XE9E0)
               ("<**>"       #XE9E1)
               ("<<^"        #XE9E2)
               ("<!"         #XE9E3)
               ("<@"         #XE9E4)
               ("<#"         #XE9E5)
               ("<%"         #XE9E6)
               ("<^"         #XE9E7)
               ("<&"         #XE9E8)
               ("<?"         #XE9E9)
               ("<."         #XE9EA)
               ("</"         #XE9EB)
               ("<\\"        #XE9EC)
               ("<\""        #XE9ED)
               ("<:"         #XE9EE)
               ("<->"        #XE9EF)
               ("<!--"       #XE9F0)
               ("<--"        #XE9F1)
               ("<~<"        #XE9F2)
               ("<==>"       #XE9F3)
               ("<|-"        #XE9F4)
               ("<<|"        #XE9F5)
               ("<-<"        #XE9F7)
               ("<-->"       #XE9F8)
               ("<<=="       #XE9F9)
               ("<=="        #XE9FA)
               ("=<<"        #XEA00)
               ("=="         #XEA01)
               ("==="        #XEA02)
               ("==>"        #XEA03)
               ("=>"         #XEA04)
               ("=~"         #XEA05)
               ("=>>"        #XEA06)
               ("=/="        #XEA07)
               ("=~="        #XEA08)
               ("==>>"       #XEA09)
               ("≡≡"         #XEA10)
               ("≡≡≡"        #XEA11)
               ("≡:≡"        #XEA12)
               (">-"         #XEA20)
               (">="         #XEA21)
               (">>"         #XEA22)
               (">>-"        #XEA23)
               (">>="        #XEA24)
               (">>>"        #XEA25)
               (">=>"        #XEA26)
               (">>^"        #XEA27)
               (">>|"        #XEA28)
               (">!="        #XEA29)
               (">->"        #XEA2A)
               ("??"         #XEA40)
               ("?~"         #XEA41)
               ("?="         #XEA42)
               ("?>"         #XEA43)
               ("???"        #XEA44)
               ("?."         #XEA45)
               ("^="         #XEA48)
               ("^."         #XEA49)
               ("^?"         #XEA4A)
               ("^.."        #XEA4B)
               ("^<<"        #XEA4C)
               ("^>>"        #XEA4D)
               ("^>"         #XEA4E)
               ("\\\\"       #XEA50)
               ("\\>"        #XEA51)
               ("\\/-"       #XEA52)
               ("@>"         #XEA57)
               ("|="         #XEA60)
               ("||"         #XEA61)
               ("|>"         #XEA62)
               ("|||"        #XEA63)
               ("|+|"        #XEA64)
               ("|->"        #XEA65)
               ("|-->"       #XEA66)
               ("|=>"        #XEA67)
               ("|==>"       #XEA68)
               ("|>-"        #XEA69)
               ("|<<"        #XEA6A)
               ("||>"        #XEA6B)
               ("|>>"        #XEA6C)
               ("|-"         #XEA6D)
               ("||-"        #XEA6E)
               ("~="         #XEA70)
               ("~>"         #XEA71)
               ("~~>"        #XEA72)
               ("~>>"        #XEA73)
               ;; ("[["         #XEA80)
               ;; ("]]"         #XEA81)
               ("\">"        #XEA90)
               ("_|_"        #XEA97))))

   (defun add-pragmatapro-prettify-symbols-alist ()
     (setq prettify-symbols-alist pragmatapro-prettify-symbols-alist))

   ;; enable prettified symbols on comments
   (defun setup-compose-predicate ()
     (setq prettify-symbols-compose-predicate
           (defun my-prettify-symbols-default-compose-p (start end _match)
             "Same as `prettify-symbols-default-compose-p', except compose symbols in comments as well."
             (let* ((syntaxes-beg (if (memq (char-syntax (char-after start)) '(?w ?_))
                                      '(?w ?_) '(?. ?\\)))
                    (syntaxes-end (if (memq (char-syntax (char-before end)) '(?w ?_))
                                      '(?w ?_) '(?. ?\\))))
               (not (or (memq (char-syntax (or (char-before start) ?\s)) syntaxes-beg)
                        (memq (char-syntax (or (char-after end) ?\s)) syntaxes-end)
                        (nth 3 (syntax-ppss))))))))

   ;; main hook fn, just add to text-mode/prog-mode
   (defun prettify-hook ()
     (add-pragmatapro-prettify-symbols-alist)
     (setup-compose-predicate))

   (add-hook 'prog-mode-hook 'prettify-hook)
   (add-hook 'text-mode-hook 'prettify-hook)

   (global-prettify-symbols-mode t)
   #+END_SRC

** GUI
   A minor mess of UI-switches to strip GUI Emacs of any non-text elements. ~visual-line-mode~ is known to cause problems, but the alternatives are not really that great either. Some of this stuff is MacOS and Emacs Plus specific.

   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)                                                    ; Get rid of all that UI
   (when (fboundp 'tool-bar-mode)
     (tool-bar-mode -1))
   (when (fboundp 'scroll-bar-mode)
     (scroll-bar-mode -1))
   (when (fboundp 'horizontal-scroll-bar-mode)
     (horizontal-scroll-bar-mode -1))
   (if (boundp 'fringe-mode)
       (fringe-mode -1))
   (if (boundp 'scroll-bar-mode)
       (scroll-bar-mode -1))

   (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))     ; “natural” title bar
   (add-to-list 'default-frame-alist '(ns-appearance . dark))            ; with white text
   (setq ns-use-proxy-icon nil)
   (setq frame-title-format nil)

   (fringe-mode 10) ; set a 10 unit fringe, for flyspell and such

   (setq visible-bell nil)
   (setq ring-bell-function 'ignore) ;; Why on earth is that bell so visible

   (blink-cursor-mode 0) ;; No blinking cursor
   (global-hl-line-mode) ;; Global line hilight

   (global-visual-line-mode 1)

   (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
   (setq suggest-key-bindings nil)

   (use-package rainbow-mode)
   #+END_SRC

** Scratch Buffer
   Crowns the scratch buffer with a random fortune from my [[https://github.com/motform/virtual-fortunes][custom cookie jar]].

   #+BEGIN_SRC emacs-lisp
   (when (executable-find "virtual-fortunes")
     (setq initial-scratch-message
           (with-temp-buffer
             (shell-command "virtual-fortunes" t)
             (let ((comment-start ";;"))
               (comment-region (point-min) (point-max)))
             (concat (buffer-string) "\n"))))
   #+END_SRC

** Keyboard
   Keybinds that make sure all the appropriate modifiers are accessible by the thumbs.

   #+BEGIN_SRC emacs-lisp
   ;; (setq mac-pass-command-to-system nil)
   (setq mac-right-command-modifier 'meta)
   (setq mac-command-modifier 'super)

   (global-set-key (kbd "s-v") 'pasteboard-paste)

   (defun pasteboard-paste()
     "Paste from OS X system pasteboard via `pbpaste' to point.
      By 4ae1e1 at https://stackoverflow.com/a/24249229"
     (interactive)
     (shell-command-on-region
      (point) (if mark-active (mark) (point)) "pbpaste" nil t))

   #+END_SRC
   
* Editing
** General
   Mixed settings for editing, should probably be cleaned up.

   #+BEGIN_SRC emacs-lisp
   (save-place-mode 1)
   (global-set-key (kbd "s-l") 'align-regexp) 

   (require 're-builder)
   (setq reb-re-syntax 'string)

   (add-hook 'before-save-hook 'whitespace-cleanup) ;; Whitespace Cleanup
   (setq whitespace-style '(face tabs tab-mark Enable)) ;;  Visualize tabs as a pipe character - "|" This will also show trailing character
   (global-whitespace-mode) ;; trailing whitespace mode everywhere
   (setq whitespace-display-mappings
         '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'

   (setq save-interprogram-paste-before-kill t
         apropos-do-all t
         ;; smart-tabs-insinuate 'c 'javascript 'python
         mouse-yank-at-point t
         require-final-newline t
         visible-bell t
         load-prefer-newer t
         ediff-window-setup-function 'ediff-setup-windows-plain
         save-place-file (concat user-emacs-directory "places")
         backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
   #+END_SRC

** Backup
   Backup settings.

   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
         backup-by-copying t    ; Don't delink hardlinks
         version-control t      ; Use version numbers on backups
         delete-old-versions t  ; Automatically delete excess backups
         kept-new-versions 20   ; how many of the newest versions to keep
         kept-old-versions 5    ; and how many of the old
         )

   #+END_SRC

** Evil
   My take on evil is to only provide it in places where vi would have been, i.e. text manipulation in regulars buffers. I’m against trying to add vi for anything else, as it gets counter-productive fairly quick.

   #+BEGIN_SRC emacs-lisp
   (use-package evil
     :init
     (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
     (setq evil-want-keybinding nil)
     :config ;scroll with C-u and bind the universal argument to M-u
     (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
     (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
     (define-key evil-insert-state-map (kbd "C-u")
       (lambda ()
         (interactive)
         (evil-delete (point-at-bol) (point))))

     (define-key evil-normal-state-map (kbd "M-u") 'universal-argument)

     :config
     (use-package evil-commentary
       :config (evil-commentary-mode))
     (evil-mode 1)
     :config  ;; This makes evil work betther with visual-line-mode
     (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
     (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
     (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
     (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
     (setq-default evil-cross-lines t)

     (add-to-list 'evil-emacs-state-modes 'dired-mode)) ;; Disable evil in dired

   (use-package evil-collection
     :after evil
     :ensure t
     :config
     (evil-collection-init))
   #+END_SRC

** Flycheck
   Hopefully a semi-lightweight linter. For some reason, I seem to be unable to find the faces that control pos-tip (very annoying).

   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :init (global-flycheck-mode)
     :init (add-hook 'css-mode-hook    'flycheck-mode)
     :init (add-hook 'scss-mode-hook   'flycheck-mode)
     :init (add-hook 'html-mode-hook   'flycheck-mode)
     :init (add-hook 'python-mode-hook 'flycheck-mode)

     :config
     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers
                           '(javascript-jshint json-jsonlist)))
     ;; Enable eslint checker for web-modeyy
     (flycheck-add-mode 'javascript-eslint 'web-mode))

   (use-package flycheck-pos-tip
     :config
     (with-eval-after-load 'flycheck
       (flycheck-pos-tip-mode))
     (eval-after-load 'flycheck
       '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))

   (use-package avy-flycheck
     :config
     (global-set-key (kbd "s-f") #'avy-flycheck-goto-error))
   #+END_SRC

   For some reason or another, getting hunspell to play nice with MacOS was very difficult. Bad hacks with big kinks in dire need of good pointers.

   #+BEGIN_SRC emacs-lisp
   (use-package flyspell
     :config

     ;; Set $DICPATH to "$HOME/Library/Spelling" for hunspell.
     (setenv
      "DICPATH"
      (concat (getenv "HOME") "/Library/Spelling"))

     (setq flyspell-issue-message-flag nil)

     (setq ispell-hunspell-dict-paths-alist
           '(("en_GB" "~/Library/Spelling/en_GB.aff")
             ("en_US" "~/Library/Spelling/en_US.aff")
             ("american" "~/Library/Spelling/en_US.aff")
             ("british" "~/Library/Spelling/en_US.aff")
             ("swedish" "~/Library/Spelling/sv_SE.aff")
             ("sv_SE" "~/Library/Spelling/sv_SE.aff")))

     (setq ispell-program-name "hunspell")
     (setq ispell-dictionary "british")

     (add-hook 'prog-mode-hook 'flyspell-prog-mode)
     (add-hook 'text-mode-hook 'flyspell-mode)
     (add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)

     (add-to-list 'ispell-dictionary-alist
                  '("british" "[[:alpha:]]" "[^[:alpha:]]" "'" t ("-d" "en_GB") nil utf-8))
     (add-to-list 'ispell-dictionary-alist
                  '("swedish" "[[:alpha:]]" "[^[:alpha:]]" "'" t ("-d" "sv_SE") nil utf-8)))

   (use-package flyspell-correct-ivy
     :bind ("s-e" . flyspell-correct-wrapper)
     :init
     (setq flyspell-correct-interface #'flyspell-correct-ivy))

   (use-package writegood-mode)

   (use-package synosaurus
     :bind
     ("M-e" . synosaurus-choose-and-replace)
     :config)
   #+END_SRC

** Company
   Company does not automatically suggest completions, requires explicit call with TAB (default behaviour was annoying and/or resource intensive).

   #+BEGIN_SRC emacs-lisp
   (use-package company
     :config
     (add-hook 'after-init-hook 'global-company-mode)
     (setq company-idle-delay nil
           company-dabbrev-downcase nil)

     (company-tng-configure-default)
     (company-quickhelp-mode)

     (evil-declare-change-repeat 'company-complete)
     (define-key evil-insert-state-map (kbd "TAB") 'company-manual-begin)
     (global-set-key [backtab] 'tab-indent-or-complete)

     (setq company-frontends
           '(company-tng-frontend
             company-pseudo-tooltip-frontend
             company-echo-metadata-frontend)))
   #+END_SRC

** Languages
   Language specific editing modes.

*** Web
    For template editing.

    #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :config
      (defun my-web-mode-hook ()
        "Hooks for Web mode."
        (setq web-mode-markup-indent-offset 2))
      (add-hook 'web-mode-hook  'my-web-mode-hook)
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))

    (use-package emmet-mode
      :config
      (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
      (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
      (setq emmet-move-cursor-between-quotes t)
      (setq emmet-expand-jsx-className? t))
    #+END_SRC

*** Restclient

    #+BEGIN_SRC emacs-lisp
    (use-package restclient)
    #+END_SRC

*** Clojure
    Rick Hickey appreciation society.

    #+BEGIN_SRC emacs-lisp
    (use-package cider
      :config
      (setq cider-repl-display-help-banner nil
            ;; cider-auto-select-error-buffer nil
            cider-save-file-on-load t)
      (evil-make-intercept-map cider--debug-mode-map 'normal))
    #+END_SRC
    
   Clj refactor.

   #+BEGIN_SRC emacs-lisp
   (use-package clj-refactor
     :config
     (defun my-clojure-mode-hook ()
       (clj-refactor-mode 1)
       (yas-minor-mode 1) ; for adding require/use/import statements
       ;; This choice of keybinding leaves cider-macroexpand-1 unbound
       (cljr-add-keybindings-with-prefix "C-c C-m"))

     (add-hook 'clojure-mode-hook #'my-clojure-mode-hook))
   #+END_SRC

   Kondo, the linter that sparks joy.

   #+BEGIN_SRC emacs-lisp
   (use-package flycheck-clj-kondo)

   (use-package clojure-mode
     :config
     (require 'flycheck-clj-kondo))
   #+END_SRC

*** Elisp

   #+BEGIN_SRC emacs-lisp
   (define-key emacs-lisp-mode-map (kbd "C-c C-k") 'eval-buffer)
   #+END_SRC

*** php
    LOL

   #+BEGIN_SRC emacs-lisp
   (use-package php-mode
     :config
     (add-hook 'php-mode-hook 'php-enable-wordpress-coding-style)
     (add-hook 'php-mode
               (lambda () (add-hook 'before-save-hook 'phps-mode-format-buffer nil 'local))))

   #+END_SRC

*** Arduino Development
    Hey, it’s my very own [[https://github.com/motform/arduino-cli-mode][arduino-cli-mode]]!

    #+BEGIN_SRC emacs-lisp
    (load "~/Projects/arduino-cli-mode/arduino-cli.el")
    (load "~/Projects/arduino-cli-mode/arduino-mode.el")

    (require 'arduino-cli-mode)

    (use-package auto-minor-mode
      :config
      (add-to-list 'auto-minor-mode-alist '("\\.ino\\'" . arduino-cli-mode)))
    #+END_SRC

*** Processing
    Hey, it’s my very own [[https://github.com/motform/p3-mode][Processing 3-mode]]!

    #+BEGIN_SRC emacs-lisp
    (load "~/Projects/p3-mode/p3.el")

    (require 'p3-mode)

    (add-to-list 'auto-mode-alist '("\\.pde\\’" . p3-mode))
    #+END_SRC

** Indentation
   Aggresive indent is amazing 95% for the time, and absolutely horrific the rest. Probably still worth it.

   #+BEGIN_SRC emacs-lisp
   (use-package aggressive-indent
     :config
     (add-hook 'prog-mode-hook #'aggressive-indent-mode)
     ;; (add-hook 'prog-mode-hook #'aggresive-indent-mode )
     ;; (global-aggressive-indent-mode 1)
     (add-to-list 'aggressive-indent-excluded-modes 'html-mode 'cider-mode))

   (setq-default truncate-lines t) ;; Line wrapping

   (show-paren-mode 1)
   (setq-default indent-tabs-mode nil)
   #+END_SRC

   There seems to be some occational problems with aggresive-indent, so I’m currently using [[https://github.com/Malabarba/aggressive-indent-mode/issues/112#issuecomment-475108842][yuhan0]]’s fix to limit the amount of timers it swapns.

   #+BEGIN_SRC emacs-lisp
   (defun cancel-aggressive-indent-timers ()
     (interactive)
     (let ((count 0))
       (dolist (timer timer-idle-list)
         (when (eq 'aggressive-indent--indent-if-changed (aref timer 5))
           (incf count)
           (cancel-timer timer))))
     (run-with-timer 60 60 'cancel-aggressive-indent-timers))
   #+END_SRC

   In a similar fashion, Adaptive-wrap aligns org-blocks to thier headings.

   #+BEGIN_SRC emacs-lisp
   (use-package adaptive-wrap
     :config
     (add-hook 'text-mode 'adaptive-wrap-prefix-mode))
   #+END_SRC

** Undo-tree
   Undo-tree, an amazing idea and a… debatable execution. President undo is effortless in Vi but fundamentally broken here. Only included b/c evil.

   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :config
     (global-undo-tree-mode)
     (setq undo-tree-auto-save-history t)
     (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
   #+END_SRC

** Quickrun
   For controlling the very verbose ardunio-cli, as platformio does not yet support the nano33ble.

   #+BEGIN_SRC emacs-lisp
   (use-package quickrun
     :config
     (quickrun-add-command "nano33ble-compile"
       ;; For compiling the current nano33 sketch
       '((:command . "arduino-cli")
         (:exec    . ("%c compile --fqbn arduino:mbed:nano33ble %n"))))

     (quickrun-add-command "testing-src2"
       ;; For uploading a nano33 sketch to the left usb-port of my mac
       '((:command . "echo")
         (:exec    . ("%c source without path \n %n%s"))))

     (quickrun-add-command "nano33ble-upload"
       ;; For uploading a nano33 sketch to the left usb-port of my mac
       '((:command . "arduino-cli")
         (:exec    . ("%c upload -p /dev/cu.usbmodem14101 --fqbn arduino:mbed:nano33ble %d"))))

     (quickrun-add-command "nano33ble-compile+upload"
       ;; For compiling AND uploding a nano33 sketch
       '((:command . "arduino-cli")
         (:exec    . ("%c compile --fqbn arduino:mbed:nano33ble %d &&"
                      "%c upload -p /dev/cu.usbmodem14101 --fqbn arduino:mbed:nano33ble %d")))))

   #+END_SRC


** Nov.el
   Ebooks in emacs! The single best way to digest CS or programing litterature, no contest.

   #+BEGIN_SRC emacs-lisp
   (use-package nov
     :config
     (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
     (setq nov-text-width most-positive-fixnum)
     (setq visual-fill-column-center-text t)
     (add-hook 'nov-mode-hook 'visual-line-mode)
     (add-hook 'nov-mode-hook 'visual-fill-column-mode)
     (setq nov-text-width 80))
   #+END_SRC

** Hydra
  Hydra for window management.

  #+BEGIN_SRC emacs-lisp
  (use-package hydra)

  (defhydra hydra-window ()
    ("q" eshell-new)
    ("p" counsel-projectile-switch-project)
    ("h" windmove-left)
    ("j" windmove-down)
    ("k" windmove-up)
    ("l" windmove-right)
    ("=" balance-windows)
    ("a" ivy-switch-buffer)
    ("t" counsel-projectile)
    ("f" counsel-find-file)
    ("F" follow-mode)
    ("v" (lambda ()
           (interactive)
           (split-window-right)
           (windmove-right)))
    ("x" (lambda ()
           (interactive)
           (split-window-below)
           (windmove-down)))
    ("s" save-buffer)
    ("d" delete-window)
    ("D" delete-other-windows))

  (define-key evil-normal-state-map (kbd "ä") 'hydra-window/body)
  ;; (define-key doc-view-mode-map (kbd "ä") 'hydra-window/body)
  (define-key dired-mode-map (kbd "ä") 'hydra-window/body)
  #+END_SRC

** Smartparens
   Keeps parens balanced in both regular arnd lisp modes

   #+BEGIN_SRC emacs-lisp
   (use-package smartparens-config
     :ensure smartparens
     :config
     (provide 'smartparens-setup)
     (setq sp-show-pair-from-inside t)
     (progn (show-smartparens-global-mode t))
     (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)

     :config
     (require 'smartparens-clojure)
     ;; pair management
     (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil))

   (use-package evil-smartparens
     :config
     ;; (require 'evil-smartparens-keybindings)
     (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
   #+END_SRC

   SPC-modal with VI-like patterns.

   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package smartparens-config
     :ensure smartparens
     :config
     (define-prefix-command 'normal-sp-map)

     (let ((map normal-sp-map))
       (define-key map "h" 'hydra-smartparens/body)

       (define-key map "^" 'sp-beginning-of-sexp)
       (define-key map "$" 'sp-end-of-sexp)
       (define-key map "w" 'sp-forward-sexp)
       (define-key map "b" 'sp-backward-sexp)
       (define-key map "l" 'sp-down-sexp)
       (define-key map "L" 'sp-backward-down-sexp)
       (define-key map "k" 'sp-up-sexp)
       (define-key map "K" 'sp-backward-up-sexp)

       ;; ;; Slurping & barfing
       (define-key map "h" 'sp-backward-slurp-sexp)
       (define-key map "H" 'sp-backward-barf-sexp)
       (define-key map "l" 'sp-forward-slurp-sexp)
       (define-key map "L" 'sp-forward-barf-sexp)

       ;; ;; Wrapping
       ;; ;; TODO add wrapping for ""
       (define-key map "R" 'sp-rewrap-sexp)
       (define-key map "u" 'sp-unwrap-sexp)
       (define-key map "U" 'sp-backward-unwrap-sexp)
       (define-key map "(" 'sp-wrap-round)
       (define-key map "{" 'sp-wrap-curly)
       (define-key map "[" 'sp-wrap-square)

       ;; ;; Sexp juggling
       (define-key map "s" 'sp-splice-sexp)
       (define-key map "S" 'sp-split-sexp)
       (define-key map "j" 'sp-join-sexp)
       (define-key map "r" 'sp-raise-sexp)
       (define-key map "t" 'sp-transpose-sexp)
       (define-key map "T" 'sp-transpose-hybrid-sexp)
       (define-key map "o" 'sp-convolute-sexp)
       (define-key map "a" 'sp-absorb-sexp)
       (define-key map "e" 'sp-emit-sexp)

       ;; ;; Destructive Editing
       (define-key map "d" 'sp-kill-sexp)
       (define-key map "D" 'sp-backward-kill-sexp)
       (define-key map "y" 'sp-copy-sexp)
       (define-key map "Y" 'sp-backward-copy-sexp)
       (define-key map "c" 'sp-change-inner)
       (define-key map "C" 'sp-change-enclosing))

     (define-key evil-visual-state-map " " 'normal-sp-map)
     (define-key evil-normal-state-map " " 'normal-sp-map))
   #+END_SRC

   Hydra, previously bound to space, now mostly used for reference (to be removed).

   #+BEGIN_SRC emacs-lisp
   (defhydra hydra-smartparens (:hint nil)
     "
    Moving^^^^                       Slurp & Barf^^   Wrapping^^            Sexp juggling^^^^               Destructive
   ------------------------------------------------------------------------------------------------------------------------
    [_a_] beginning  [_n_] down      [_h_] bw slurp   [_R_]   rewrap        [_S_] split   [_t_] transpose   [_c_] change inner  [_w_] copy
    [_e_] end        [_N_] bw down   [_H_] bw barf    [_u_]   unwrap        [_s_] splice  [_A_] absorb      [_C_] change outer
    [_f_] forward    [_p_] up        [_l_] slurp      [_U_]   bw unwrap     [_r_] raise   [_E_] emit        [_k_] kill          [_g_] quit
    [_b_] backward   [_P_] bw up     [_L_] barf       [_(__{__[_] wrap (){}[]   [_j_] join    [_o_] convolute   [_K_] bw kill       [_q_] quit"
     ;; Moving
     ("a" sp-beginning-of-sexp)
     ("e" sp-end-of-sexp)
     ("f" sp-forward-sexp)
     ("b" sp-backward-sexp)
     ("n" sp-down-sexp)
     ("N" sp-backward-down-sexp)
     ("p" sp-up-sexp)
     ("P" sp-backward-up-sexp)

     ;; Slurping & barfing
     ("h" sp-backward-slurp-sexp)
     ("H" sp-backward-barf-sexp)
     ("l" sp-forward-slurp-sexp)
     ("L" sp-forward-barf-sexp)

     ;; Wrapping
     ("R" sp-rewrap-sexp)
     ("u" sp-unwrap-sexp)
     ("U" sp-backward-unwrap-sexp)
     ("(" sp-wrap-round)
     ("{" sp-wrap-curly)
     ("[" sp-wrap-square)

     ;; Sexp juggling
     ("S" sp-split-sexp)
     ("s" sp-splice-sexp)
     ("r" sp-raise-sexp)
     ("j" sp-join-sexp)
     ("t" sp-transpose-sexp)
     ("A" sp-absorb-sexp)
     ("E" sp-emit-sexp)
     ("o" sp-convolute-sexp)

     ;; Destructive editing
     ("c" sp-change-inner :exit t)
     ("C" sp-change-enclosing :exit t)
     ("k" sp-kill-sexp)
     ("K" sp-backward-kill-sexp)
     ("w" sp-copy-sexp)

     ("q" nil)
     ("g" nil))

   (define-key evil-normal-state-map (kbd "SPC") 'hydra-smartparens/body)
   (define-key evil-visual-state-map (kbd "SPC") 'hydra-smartparens/body)
   #+END_SRC

* Navigation
  Various things that help with navigation in buffers and or Emacs.

** avy
   Aka vim-sneak, but with full-file movement. The keys are mapped to a colemak-home-row.

   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :config
     (setq
      avy-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?e ?i ?o)
      avy-background t
      avy-all-windows nil)
     (evil-define-key 'normal global-map (kbd "s") #'evil-avy-goto-char-timer)
     (evil-define-key 'normal evil-smartparens-mode-map (kbd "s") #'evil-avy-goto-char-timer))
   #+END_SRC

** ivy
   ivy-swiper-counsel is core to my Emacs. Honestly the last thing I would remove from this config.

   #+BEGIN_SRC emacs-lisp
   (use-package counsel)
   (use-package counsel-projectile)

   (use-package ivy
     :diminish (ivy-mode . "")
     :bind
     (:map ivy-mode-map
           ("C-'" . ivy-avy))
     :config
     (ivy-mode 1)
     (global-set-key (kbd "M-s") 'counsel-rg)
     (global-set-key (kbd "C-s") 'swiper-isearch)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "C-x b") 'ivy--buffer-list)
     (global-set-key (kbd "s-u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)
     (global-set-key (kbd "s-g") 'counsel-org-goto-all)

     (setq ivy-use-virtual-buffers t)
     (setq ivy-height 20) ;; number of result lines to display
     (setq ivy-count-format "") ;; does not count candidates
     (setq ivy-initial-inputs-alist nil) ;; no regexp by default
     (setq ivy-re-builders-alist ;; configure regexp engine.
           '((t   . ivy--regex-ignore-order))))
   #+END_SRC


** Eyebrowse
   Like tmux, but better and inside Emacs! Vital to my workflow.

   #+BEGIN_SRC emacs-lisp
   (use-package eyebrowse
     :defer 1
     :init
     (global-unset-key (kbd "C-c C-w"))
     :config
     (progn
       (define-key eyebrowse-mode-map (kbd "s-1") 'eyebrowse-switch-to-window-config-1)
       (define-key eyebrowse-mode-map (kbd "s-2") 'eyebrowse-switch-to-window-config-2)
       (define-key eyebrowse-mode-map (kbd "s-3") 'eyebrowse-switch-to-window-config-3)
       (define-key eyebrowse-mode-map (kbd "s-4") 'eyebrowse-switch-to-window-config-4)
       (define-key eyebrowse-mode-map (kbd "s-5") 'eyebrowse-switch-to-window-config-5)
       (define-key eyebrowse-mode-map (kbd "s-6") 'eyebrowse-switch-to-window-config-6)
       (define-key eyebrowse-mode-map (kbd "s-7") 'eyebrowse-switch-to-window-config-7)
       (define-key eyebrowse-mode-map (kbd "s-8") 'eyebrowse-switch-to-window-config-8)
       (define-key eyebrowse-mode-map (kbd "s-9") 'eyebrowse-switch-to-window-config-9)
       (define-key eyebrowse-mode-map (kbd "s-0") 'eyebrowse-switch-to-window-config-0)
       (eyebrowse-mode t)
       (setq eyebrowse-mode-line-style 'hide)
       (setq eyebrowse-new-workspace t)))
   #+END_SRC

** Projectile
   Should probably look into swapping this out with counsel-git, but not today.

   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :config
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "s-t") 'counsel-projectile)
     (define-key projectile-mode-map (kbd "s-p") 'counsel-projectile-switch-project)
     (define-key projectile-mode-map (kbd "s-s") 'counsel-projectile-rg)
     (define-key projectile-mode-map (kbd "s-a") 'ivy-switch-buffer)
     (setq projectile-enable-caching t)
     (add-to-list 'projectile-globally-ignored-directories "node_modules")
     (add-to-list 'projectile-globally-ignored-directories ".node_modules")
     (add-to-list 'projectile-globally-ignored-directories "shadow-cljs")
     (add-to-list 'projectile-globally-ignored-directories ".shadow-cljs")
     (projectile-mode +1))
   #+END_SRC

* Org
  Manic blend of org settings. To be refactored.

  #+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq
     org-agenda-files '("/Users/motform/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/todo")
     org-src-window-setup 'other-window ;; Better source code window editing
     org-src-fontify-natively t ;; Highlight and indent source code blocks
     org-src-tab-acts-natively t
     org-hide-leading-stars nil
     org-edit-src-content-indentation 0
     org-fontify-quote-and-verse-blocks t ;; Highlight quotes
     org-confirm-babel-evaluate nil ;; Prevent confirmation
     org-hide-emphasis-markers t ;; Hide markers
     org-fontify-whole-heading-line t ;; Fontify whole lines
     org-startup-with-inline-images t) ;; Display images

    :config ;; export
    (defun org-auto-export-on() "auto export to pdf when saving an org file"
           (interactive)
           (when (eq major-mode 'org-mode)
             (add-hook 'after-save-hook 'org-export-pdf-then-open t t)))

    :config ;; tex
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    (setq org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    :config ;; Babel
    (add-hook
     'org-babel-after-execute-hook
     (lambda ()
       (when org-inline-image-overlays
         (org-redisplay-inline-images))))

    :config ;; evil, makes paragraph objects work
    (add-hook 'org-mode-hook (lambda ()
                               (setq paragraph-start "\\|[  ]*$"
                                     paragraph-separate "[  ]*$")))

    :config ;; pdf
    (add-to-list 'org-file-apps '("\\.pdf\\'" . org-pdfview-open))

    :config ;; prose
    (setq org-catch-invisible-edits 'show-and-error)
    (setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
    (setq org-cycle-separator-lines 0)
    (setq olivetti-body-width 100))
  #+END_SRC

** Typo
   A sometimes confusing must-have for any self-respecting typophile.

   #+BEGIN_SRC emacs-lisp
   (use-package typo
     :config
     (typo-global-mode 1)
     (add-hook 'text-mode-hook 'typo-mode))
   #+END_SRC

** Line-spacing
   I sometimes use this when I write longer texts in a proportional font.

   #+BEGIN_SRC emacs-lisp
   (defun xah-toggle-line-spacing ()
     "Toggle line spacing between no extra space to extra half line height.
      URL `http://ergoemacs.org/emacs/emacs_toggle_line_spacing.html'
      Version 2017-06-02"
     (interactive)
     (if line-spacing
         (setq line-spacing nil)
       (setq line-spacing 0.25))
     (redraw-frame (selected-frame)))
   #+END_SRC

** OX
   Should explore this further.

   #+BEGIN_SRC emacs-lisp
   (use-package ox-pandoc)
   #+END_SRC

** Org-brain
   Magic crazy brain-mapping.

   #+BEGIN_SRC emacs-lisp
   (use-package org-brain
     :init
     (setq org-brain-path "/Users/motform/org/brain ")
     ;; For Evil users
     (with-eval-after-load 'evil
       (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
     :config
     (setq org-id-track-globally t)
     (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
     ;; (push '("b" "Brain" plain (function org-brain-goto-end)
     ;;         "* %i%?" :empty-lines 1)
     ;;       org-capture-templates)
     (setq org-brain-visualize-default-choices 'all)
     (setq org-brain-title-max-length 12)
     (setq org-brain-include-file-entries nil
           org-brain-file-entries-use-title nil))
   #+END_SRC

** Calendar
   Calendar localizations, courtesy of [[http://bigwalter.net/daniel/elisp/sv-kalender.el][Daniel Jensen’s sv-kalender.el]].

   #+BEGIN_SRC emacs-lisp
   (setq calendar-week-start-day 1) 
   (setq calendar-date-style 'european)
   (setq calendar-date-display-form
         '((if dayname
               (concat dayname ", "))
           day " " monthname " " year))
   #+END_SRC

* Eshell
  The best shell for the sole reason that it behaves like Emacs. Long-game is to slowly turn it into Plan9 RC.

   #+BEGIN_SRC emacs-lisp
   (use-package eshell
     :config
     (require 'em-smart)
     (add-hook 'eshell-mode-hook (lambda () (eshell-smart-initialize)))
     (setq eshell-where-to-jump 'begin)
     (setq eshell-review-quick-commands nil)
     (setq eshell-smart-space-goes-to-end t)
     (setq eshell-glob-case-insensitive t)
     (setq eshell-cmpl-ignore-case t)
     (setq eshell-banner-message "")
     (define-key global-map (kbd "s-q") 'eshell-new)
     (define-key global-map (kbd "M-q") 'counsel-esh-history)

     (add-hook 'eshell-mode-hook
               (lambda ()
                 (define-key eshell-mode-map (kbd "<tab>")
                   (lambda () (interactive) (pcomplete-std-complete)))))

     (defun eshell-new () ;; Make a new eshell buffer
       (interactive)
       ;; (split-window-vertically '30)
       (eshell t)
       (eshell-smart-initialize))

     (defun fish-path (path max-len)
       "Return a potentially trimmed-down version of the directory PATH, replacing
   parent directories with their initial characters to try to get the character
   length of PATH (sans directory slashes) down to MAX-LEN.
   Source: https://www.emacswiki.org/emacs/EshellPrompt"
       (let* ((components (split-string (abbreviate-file-name path) "/"))
              (len (+ (1- (length components))
                      (cl-reduce '+ components :key 'length)))
              (str ""))
         (while (and (> len max-len)
                     (cdr components))
           (setq str (concat str
                             (cond ((= 0 (length (car components))) "/")
                                   ((= 1 (length (car components)))
                                    (concat (car components) "/"))
                                   (t
                                    (if (string= "."
                                                 (string (elt (car components) 0)))
                                        (concat (substring (car components) 0 2)
                                                "/")
                                      (string (elt (car components) 0) ?/)))))
                 len (- len (1- (length (car components))))
                 components (cdr components)))
         (concat str (cl-reduce (lambda (a b) (concat a "/" b)) components))))

     (defun fishy-eshell-prompt-function ()
       (concat (fish-path (eshell/pwd) 40)
               (if (= (user-uid) 0) " # " " $ ")))

     (setq eshell-prompt-function 'fishy-eshell-prompt-function))

   (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
   (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
   #+END_SRC

   Adding xterm-support.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package xterm-color
  :config
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions))

  (add-hook 'shell-mode-hook
            (lambda ()
              ;; Disable font-locking in this buffer to improve performance
              (font-lock-mode -1)
              ;; Prevent font-locking from being re-enabled in this buffer
              (make-local-variable 'font-lock-function)
              (setq font-lock-function (lambda (_) nil))
              (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))

  ;; Also set TERM accordingly (xterm-256color)
  ;; You can also use it with eshell (and thus get color output from system ls):

  (require 'eshell)

  (add-hook 'eshell-before-prompt-hook
            (lambda ()
              (setq xterm-color-preserve-properties t)))

  (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
  (setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))

  ;;  Don't forget to setenv TERM xterm-256color

  (setq compilation-environment '("TERM=xterm-256color"))

  (add-hook 'compilation-start-hook
            (lambda (proc)
              ;; We need to differentiate between compilation-mode buffers
              ;; and running as part of comint (which at this point we assume
              ;; has been configured separately for xterm-color)
              (when (eq (process-filter proc) 'compilation-filter)
                ;; This is a process associated with a compilation-mode buffer.
                ;; We may call `xterm-color-filter' before its own filter function.
                (set-process-filter
                 proc
                 (lambda (proc string)
                   (funcall 'compilation-filter proc
                            (xterm-color-filter string))))))))
#+END_SRC

* Magit

  #+BEGIN_SRC emacs-lisp
  (use-package magit)
  #+END_SRC

** Forge

   #+BEGIN_SRC emacs-lisp
   (use-package forge)
   #+END_SRC

** Transident

   #+BEGIN_SRC emacs-lisp
   (use-package transient)
   #+END_SRC

** Evil-magit
   #+BEGIN_SRC emacs-lisp
   (use-package evil-magit
     :config
     (setq evil-magit-use-y-for-yank t))
   #+END_SRC

* Dired
  ~ls~, but you know, Emacs. Sometimes C-x C-d starts with the wrong switches, don’t know what’s up with that.

  #+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/usr/local/bin/gls"
          dired-listing-switches "-aBhl --group-directories-first"))

  (setq dired-dwim-target t)  ; big norton commander energy
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
  (setq global-auto-revert-non-file-buffers t) ; auto revert dired buffers
  (setq auto-revert-verbose nil)
  (setq delete-by-moving-to-trash t)

  (defun xah-dired-mode-setup ()
    "to be run as hook for `dired-mode'."
    (dired-hide-details-mode 1))
  (add-hook 'dired-mode-hook 'xah-dired-mode-setup)
  #+END_SRC

  As always, [[http://ergoemacs.org/emacs/elisp_dired_rename_space_to_underscore.html][xah comes to the rescue]] with some really nice fns that allows us to remove stupid spaces from filenames in batches.

  #+BEGIN_SRC emacs-lisp
  (defun xah-dired-rename-space-to-hyphen ()
    "In dired, rename current or marked files by replacing space to hyphen -.
  If not in `dired', do nothing.
  URL `http://ergoemacs.org/emacs/elisp_dired_rename_space_to_underscore.html'
  Version 2016-12-22"
    (interactive)
    (require 'dired-aux)
    (if (equal major-mode 'dired-mode)
        (progn
          (mapc (lambda (x)
                  (when (string-match " " x )
                    (dired-rename-file x (replace-regexp-in-string " " "_" x) nil)))
                (dired-get-marked-files ))
          (revert-buffer))
      (user-error "Not in dired")))

  (defun xah-dired-rename-space-to-underscore ()
    "In dired, rename current or marked files by replacing space to underscore _.
  If not in `dired', do nothing.
  URL `http://ergoemacs.org/emacs/elisp_dired_rename_space_to_underscore.html'
  Version 2017-01-02"
    (interactive)
    (require 'dired-aux)
    (if (equal major-mode 'dired-mode)
        (progn
          (mapc (lambda (x)
                  (when (string-match " " x )
                    (dired-rename-file x (replace-regexp-in-string " " "_" x) nil)))
                (dired-get-marked-files ))
          (revert-buffer))
      (user-error "Not in dired.")))

  (progn
    (require 'dired)
    (define-key dired-mode-map (kbd "_") 'xah-dired-rename-space-to-underscore)
    (define-key dired-mode-map (kbd "-") 'xah-dired-rename-space-to-hyphen))
  #+END_SRC

* Functions
  Random function dump.

  #+BEGIN_SRC emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let* ((name (buffer-name))
           (filename (buffer-file-name))
           (basename (file-name-nondirectory filename)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  #+END_SRC

  #+BEGIN_SRC emacs-lisp
  (defun underline ()
    "Underline line below cursor with LINE-CHAR."
    (interactive "*")
    (let* ((line-char (string-to-char (read-string "Char ")))
           (len (- (line-end-position) (line-beginning-position)))
           (uline (make-string len line-char)))
      (end-of-line)
      (insert "\n")
      (insert uline)))

  (define-key evil-normal-state-map (kbd "s-M-u") 'underline)
  #+END_SRC
