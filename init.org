#+TITLE: .emacs — est 2019
#+AUTHOR: Motform
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* Introduction
  It is not every day that you sit down to write an introduction to your software configuration. Yet, here we are. My take on Emacs tires to be equally pragmatic and rhizomatic. Each line should be read the greater context, encapsulation is the ultimate lie.

  Learning Emacs is quite the task/lifestyle, so in order to keep things manageable I only include things code and features that I understand. This code is only tested against [[https://github.com/d12frosted/homebrew-emacs-plus][d12frosted's Emacs Plus]]. The structure of this literate .emacs is forked from [[https://github.com/larstvei/dot-emacs][larstvei’s excellent config]].

* Initialization
** Meta
   ~NOTE: This section is a straight copy from larsveti’s config.~

   When this configuration is loaded for the first time, the =init.el= is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; This file replaces itself with the actual configuration at first run.

   ;; We can't tangle without org!
   (require 'org)
   ;; Open the configuration
   (find-file (concat user-emacs-directory "init.org"))
   ;; tangle it
   (org-babel-tangle)
   ;; load it
   (load-file (concat user-emacs-directory "init.el"))
   ;; finally byte-compile it
   (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   Lexical scoping for the init-file is needed, it can be specified in the
   header. This is the first line of the actual configuration:

   #+BEGIN_SRC emacs-lisp
   ;;; -*- lexical-binding: t -*-
   #+END_SRC

   Tangle and compile this file on save automatically:

   #+BEGIN_SRC emacs-lisp
   (defun tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el")))))

   (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

** Startup tweaks
   One of the few places where there is some code that I don’t fully comprehend. The gist is: Pause the garbage collector until after a completed startup in order to speed things up. Makes a bit of a difference, but definitely something that I might cut out in future versions.


   #+BEGIN_SRC emacs-lisp
   ;;; Speed up init.
   ;;; Temporarily reduce garbage collection during startup. Inspect `gcs-done'.
   (defun ambrevar/reset-gc-cons-threshold ()
     (setq gc-cons-threshold (car (get 'gc-cons-threshold 'standard-value))))
   (setq gc-cons-threshold (* 64 1024 1024))
   (add-hook 'after-init-hook 'ambrevar/reset-gc-cons-threshold)
   ;;; Temporarily disable the file name handler.
   (setq default-file-name-handler-alist file-name-handler-alist)
   (setq file-name-handler-alist nil)
   (defun ambrevar/reset-file-name-handler-alist ()
     (setq file-name-handler-alist default-file-name-handler-alist))
   (add-hook 'focus-out-hook #'garbage-collect)  ;; Garbage collect on focus out

   (add-hook 'after-init-hook 'ambrevar/reset-file-name-handler-alist)
   #+END_SRC

   More tweaks to increase speed, this time by mucking with the caches.

   #+BEGIN_SRC emacs-lisp
   ;; Speed up icon caches
   (setq inhibit-compacting-font-caches t)

   ;; Improve theme loading
   (defadvice load-theme (before clear-previous-themes activate)
     "Clear existing theme settings instead of layering them"
     (mapc #'disable-theme custom-enabled-themes))

   (setq ad-redefinition-action 'accept) ; ??
   #+END_SRC

** Melpa
   Straight from the Melpa docs. Some Emacs distros (like mituharu’s mac-port) complain when you manually initialize package, so there is that.
   

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                       (not (gnutls-available-p))))
          (proto (if no-ssl "http" "https")))
     (when no-ssl
       (warn "You version of Emacs does not support SSL!"))
     ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
     (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
     ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
     (when (< emacs-major-version 24)
       ;; For important compatibility libraries like cl-lib
       (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
     (package-initialize)
   #+END_SRC

** Use-package
   Use package is a fantastic plug-in that provides a generalised interface for plug-in management. These lines should install, enable and download the things required for this config to work, but I have yet to really test that.

   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

   (use-package try
     :ensure t)

   (use-package use-package
     :config
     (setq use-package-always-ensure t)
     (use-package auto-compile
       :config (auto-compile-on-load-mode))

     (setq load-prefer-newer t))
   #+END_SRC

** Encoding
   Oh Unicode I love you, but you are breaking my heart. This should cover all of the relevant cases, but we all know that is ultimately a lie.

   #+BEGIN_SRC emacs-lisp
   (set-language-environment "UTF-8")
   (prefer-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   #+END_SRC

** PATH
   GUI Emacs does not read your path variable by default. There are very “good” reasons for this behaviour, but it still sucks. This should sort that out.

  #+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/"))
  (setq exec-path (append exec-path '("/usr/local/bin/")))
  (setq exec-path (append exec-path '("~/.cabal/bin")))
  (setq exec-path (append exec-path '("~/Library/Spelling")))
  (setq exec-path (append exec-path '("~/.local/bin")))
  (setq exec-path (append exec-path '("/Users/motform/.pyenv/versions/emacs/bin")))

  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize)))
  #+END_SRC

* Backups and file management
  While not Emacs exclusive, ~save-place-mode~ neatly illustrates a potential of software that is more about process than static files. It is a simple variable that when true, remembers your where you left off when you last worked something, and puts you there. That’s it! Dead simple, yet surprisingly remarkable.

  #+BEGIN_SRC emacs-lisp
  (save-place-mode 1) ;; Save recent
  ;; Sane backups
  (setq backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

  (global-auto-revert-mode) ; files update yeah

  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  #+END_SRC

* Look and Feel
  tl;dr, it is just [[https://github.com/hlissner/doom-emacs][Doom Emacs]]. hilssner is the man.

** Start screen
   Most important part of the config. 

   #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)  ; No start screen
   (setf initial-buffer-choice "~/.emacs.d/numogram.txt")
   #+END_SRC

** Icons
   All the icons! 

   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons)

   (use-package all-the-icons-dired
     :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

   (use-package all-the-icons-ivy
     :config
     (setq all-the-icons-ivy-file-commands
           '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
     (all-the-icons-ivy-setup))
   #+END_SRC

** Theme
   Someone once called tomorrow/base16 default “80’s”. I’m still not sure if I agree, but until I do, it stays.

   #+BEGIN_SRC emacs-lisp 
   (use-package doom-themes
     :config
     (load-theme 'doom-tomorrow-night t)
     (doom-themes-visual-bell-config)
     (doom-themes-org-config))
   #+END_SRC

** Modeline
   Every time I go into the ~messages~ buffer, I get pleasantly surprised at how nice the OG modeline looks. Then I come back to the doomline and wow do I not miss having all my minor modes constantly visible.

   #+BEGIN_SRC emacs-lisp 
   (use-package doom-modeline
     :hook (after-init . doom-modeline-mode)
     :config
     (setq doom-modeline-python-executable "/Users/motform/.pyenv/versions/emacs/bin/python"))
   #+END_SRC

** Typography
   For a typophile, this is the most important part of the config. After all, Emacs is really nothing but text, so why settle for anything but the best? The best in this case, is probably [[https://www.fsd.it/shop/fonts/pragmatapro/][Pragmata Pro by Fabrizio Schiavi]]. It’s not as fun as Operator, nor as cosy as Input, but damn if it is not the most comprehensive typeface this side of… well anything. The condensed look took some getting used to, but once you are used to it, you cannot live without it. If the price tag is too big for you, I recommend Inconsolata as a replacement.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'default-frame-alist '(font . "PragmataPro" ))
   (set-face-attribute 'default nil :family "Pragmatapro" :height 120)
   (set-face-attribute 'fixed-pitch nil :family "Pragmatapro" :height 120)
   (set-face-attribute 'variable-pitch nil :family "Pigeonette V01" :height 120)
   #+END_SRC
   
   Emacs does not really support ligatures. The emacs-mac-port does, but it has some other problems instead. So, we are left the universal option of manually font-locking all the glyphs. This is tailored superficially for the symbols provided by Pragmata, so you mileage might wary. Code by [[https://gist.github.com/DeLaGuardo/fe1f3d9397d6ef7468460d54d5601156][DeLaGuardo.]]

   #+BEGIN_SRC emacs-lisp
   ;; Enable ligatures without prettify-symbols
   (provide 'add-pragmatapro-symbol-keywords)

   (defconst pragmatapro-fontlock-keywords-alist
     (mapcar (lambda (regex-char-pair)
               `(,(car regex-char-pair)
                 (0 (prog1 ()
                      (compose-region (match-beginning 1)
                                      (match-end 1)
                                      ,(concat (list ?\C-i)
                                               (list (decode-char 'ucs (cadr regex-char-pair)))))))))
             '(
               ("\\(!!\\)"               #XE720)
               ("\\(!=\\)"               #XE721)
               ("\\(!==\\)"              #XE722)
               ("\\(!!!\\)"              #XE723)
               ("\\(!≡\\)"               #XE724)
               ("\\(!≡≡\\)"              #XE725)
               ("[^<]\\(!>\\)"           #XE726)
               ("\\(#(\\)"               #XE740)
               ("\\(#_\\)"               #XE741)
               ("\\(#{\\)"               #XE742)
               ("\\(#\\?\\)"             #XE743)
               ("[^<]\\(#>\\)"           #XE744)
               ("\\(%=\\)"               #XE750)
               ("[^<]\\(%>\\)"           #XE751)
               ("\\(&%\\)"               #XE760)
               ("\\(&&\\)"               #XE761)
               ("\\(&\\*\\)"             #XE762)
               ("\\(&\\+\\)"             #XE763)
               ("\\(&-\\)"               #XE764)
               ("\\(&/\\)"               #XE765)
               ("\\(&=\\)"               #XE766)
               ("\\(&&&\\)"              #XE767)
               ("[^<]\\(&>\\)"           #XE768)
               ("\\(\\*\\*\\*\\)"        #XE780)
               ("\\(\\*=\\)"             #XE781)
               ("\\(\\*/\\)"             #XE782)
               ("[^<]\\(\\*>\\)"         #XE783)
               ("\\(\\+\\+\\)"           #XE790)
               ("\\(\\+\\+\\+\\)"        #XE791)
               ("[^\\+]\\(\\+=\\)"       #XE792)
               ("[^<]\\(\\+>\\)"         #XE793)
               ("\\(\\+\\+=\\)"          #XE794)
               ("\\(--\\)"               #XE7A0)
               ("[^-]\\(-<\\)"           #XE7A1)
               ("\\(-<<\\)"              #XE7A2)
               ("\\(-=\\)"               #XE7A3)
               ("[^|]\\(->\\)"           #XE7A4)
               ("[^|]\\(->>\\)"          #XE7A5)
               ("\\(---\\)"              #XE7A6)
               ("\\(-\\\\/\\)"           #XE7A9)
               ("[^\\^]\\(\\.\\.\\)"     #XE7B0)
               ("\\(\\.\\.\\.\\)"        #XE7B1)
               ("\\(\\.\\.<\\)"          #XE7B2)
               ("\\(\\.>\\)"             #XE7B3)
               ("\\(\\.~\\)"             #XE7B4)
               ("\\(\\.=\\)"             #XE7B5)
               ("\\(/\\*\\)"             #XE7C0)
               ("\\(//\\)"               #XE7C1)
               ("[^<]\\(/>\\)"           #XE7C2)
               ("[^=]\\(/=\\)"           #XE7C3)
               ("\\(/==\\)"              #XE7C4)
               ("\\(///\\)"              #XE7C5)
               ("\\(/\\*\\*\\)"          #XE7C6)
               ("\\(::\\)"               #XE7D0)
               ("\\(:=\\)"               #XE7D1)
               ("[^≡]\\(:≡\\)"           #XE7D2)
               ("\\(:>\\)"               #XE7D3)
               ("\\(<\\*\\)"             #XE7E1)
               ("\\(<\\*>\\)"            #XE7E2)
               ("[^<]\\(<-\\)"           #XE7E4)
               ("[^-]\\(<<\\)"           #XE7E5)
               ("\\(<<<\\)"              #XE7E6)
               ("\\(<<=\\)"              #XE7E7)
               ("[^<]\\(<=\\)"           #XE7E8)
               ("\\(<=>\\)"              #XE7E9)
               ("\\(<>\\)"               #XE7EA)
               ("\\(<<-\\)"              #XE7EC)
               ("\\(<|\\)"               #XE7ED)
               ("\\(<|>\\)"              #XE7EB)
               ("\\(<=<\\)"              #XE7EE)
               ("[^<]\\(<~\\)"           #XE7EF)
               ("\\(<~~\\)"              #XE7F0)
               ("\\(<<~\\)"              #XE7F1)
               ("\\(<\\$\\)"             #XE7F2)
               ("\\(<\\$>\\)"            #XE7E0)
               ("\\(<\\+\\)"             #XE7F3)
               ("\\(<\\+>\\)"            #XE7E3)
               ("\\(<~>\\)"              #XE800)
               ("\\(<\\*\\*>\\)"         #XE801)
               ("\\(<<\\^\\)"            #XE802)
               ("\\(<!\\)"               #XE803)
               ("\\(<!>\\)"              #XE7F4)
               ("\\(<@\\)"               #XE804)
               ("\\(<#\\)"               #XE805)
               ("\\(<#>\\)"              #XE7F6)
               ("\\(<%\\)"               #XE806)
               ("\\(<%>\\)"              #XE7F7)
               ("[^<]\\(<\\^\\)"         #XE807)
               ("\\(<&\\)"               #XE808)
               ("\\(<&>\\)"              #XE7F9)
               ("\\(<\\?\\)"             #XE809)
               ("\\(<\\.\\)"             #XE80A)
               ("\\(<\\.>\\)"            #XE7FB)
               ("\\(</\\)"               #XE80B)
               ("\\(</>\\)"              #XE7FC)
               ("\\(<\\\\\\)"            #XE80C)
               ("\\(<\"\\)"              #XE80D)
               ("\\(<\">\\)"             #XE7FE)
               ("\\(<:\\)"               #XE80E)
               ("\\(<:>\\)"              #XE7FF)
               ("\\(=<<\\)"              #XE820)
               ("[^/!<=>]\\(==\\)[^><=]" #XE821)
               ("\\(===\\)"              #XE822)
               ("[^<]\\(==>\\)"          #XE823)
               ("[^=:<]\\(=>\\)"         #XE824)
               ("\\(=~\\)"               #XE825)
               ("\\(=>>\\)"              #XE826)
               ("[^!]\\(≡≡\\)"           #XE830)
               ("\\(≡≡≡\\)"              #XE831)
               ("\\(≡:≡\\)"              #XE832)
               ("[^>]\\(>-\\)"           #XE840)
               ("\\(>=\\)"               #XE841)
               ("[^=-]\\(>>\\)"          #XE842)
               ("\\(>>-\\)"              #XE843)
               ;; ("\\(>==\\)"              #XE844)
               ("\\(>>=\\)"              #XE844)
               ("\\(>>>\\)"              #XE845)
               ("\\(>=>\\)"              #XE846)
               ("\\(>>\\^\\)"            #XE847)
               ("\\(\\?\\?\\)"           #XE860)
               ("\\(\\?~\\)"             #XE861)
               ("\\(\\?=\\)"             #XE862)
               ("\\(\\?>\\)"             #XE863)
               ("\\(<\\?>\\)"            #XE7FA)
               ("\\(\\?\\?\\?\\)"        #XE864)
               ("\\(\\^=\\)"             #XE868)
               ("\\(\\^\\.\\)"           #XE869)
               ("\\(\\^\\?\\)"           #XE86A)
               ("\\(\\^\\.\\.\\)"        #XE86B)
               ("\\(\\^<<\\)"            #XE86C)
               ("\\(\\^>\\)"             #XE86E)
               ("\\(\\^>>\\)"            #XE86D)
               ("\\(<\\^>\\)"            #XE7F8)
               ("[^\\\\]\\(\\\\\\\\\\)"  #XE870)
               ("[^<]\\(\\\\>\\)"        #XE871)
               ("\\(<\\\\>\\)"           #XE7FD)
               ("\\(@>\\)"               #XE877)
               ("\\(<@>\\)"              #XE7F5)
               ("\\(|=\\)"               #XE880)
               ("\\(||\\)"               #XE881)
               ("[^<]\\(|>\\)"           #XE882)
               ("\\(|||\\)"              #XE883)
               ("\\(|\\+|\\)"            #XE884)
               ("\\(~=\\)"               #XE890)
               ("[^~<]\\(~>\\)"          #XE891)
               ("\\(~~>\\)"              #XE892)
               ("\\(~>>\\)"              #XE893)
               ("[^<]\\(\">\\)"          #XE8B0))))

   (defun add-pragmatapro-symbol-keywords ()
     (font-lock-add-keywords nil pragmatapro-fontlock-keywords-alist))

   (add-hook 'prog-mode-hook
             #'add-pragmatapro-symbol-keywords)

   #+END_SRC

** Chrome
   A minor mess of UI-switches to strip GUI Emacs of any non-text elements. ~visual-line-mode~ is known to cause problems, but the alternatives are not really that great either. Some of this stuff is MacOS and Emacs Plus specific.

   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)                                                    ; Get rid of all that UI
   (when (fboundp 'tool-bar-mode)
     (tool-bar-mode -1))
   (when (fboundp 'scroll-bar-mode)
     (scroll-bar-mode -1))
   (when (fboundp 'horizontal-scroll-bar-mode)
     (horizontal-scroll-bar-mode -1))
   (if (boundp 'fringe-mode)
       (fringe-mode -1))
   (if (boundp 'scroll-bar-mode)
       (scroll-bar-mode -1))

   (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))     ; “natural” title bar
   (add-to-list 'default-frame-alist '(ns-appearance . dark))            ; with white text
   (setq ns-use-proxy-icon nil)
   (setq frame-title-format nil)

   (fringe-mode 10) ; set a 10 unit fringe, for flyspell and such

   (setq visible-bell nil)
   (setq ring-bell-function 'ignore) ;; Why on earth is that bell so visible

   (blink-cursor-mode 0) ;; No blinking cursor
   (global-hl-line-mode) ;; Global line hilight

   (global-visual-line-mode 1)

   (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n

   (use-package rainbow-mode)
   #+END_SRC

** Scratch Buffer
   Crowns the scratch buffer with a random fortune from [[https://github.com/motform/virtual-fortunes][my custom cookie jar]].

   #+BEGIN_SRC emacs-lisp
   ;; Supply a random virtual-fortune cookie as the *scratch* message.
   (when (executable-find "virtual-fortunes")
     (setq initial-scratch-message
           (with-temp-buffer
             (shell-command "virtual-fortunes" t)
             (let ((comment-start ";;"))
               (comment-region (point-min) (point-max)))
             (concat (buffer-string) "\n"))))
   #+END_SRC

** Keyboard
   Keybinds that make sure all the appropriate modifiers are accessible by the thumbs.

   #+BEGIN_SRC emacs-lisp
   (setq ns-option-modifier         'option)
   (setq ns-command-modifier        'super)
   (setq ns-right-command-modifier  'meta)
   (setq mac-pass-command-to-system nil)
   #+END_SRC
   
* Editing

** General
   Mixed settings for editing, should probably be cleaned up.

   #+BEGIN_SRC emacs-lisp
   (save-place-mode 1)
   (global-set-key (kbd "s-l") 'align-regexp) 

   (require 're-builder)
   (setq reb-re-syntax 'string)

   (add-hook 'before-save-hook 'whitespace-cleanup) ;; Whitespace Cleanup
   (setq whitespace-style '(face tabs tab-mark Enable)) ;;  Visualize tabs as a pipe character - "|" This will also show trailing character
   (global-whitespace-mode) ;; trailing whitespace mode everywhere

   (setq save-interprogram-paste-before-kill t
         apropos-do-all t
         ;; smart-tabs-insinuate 'c 'javascript 'python)
         mouse-yank-at-point t
         require-final-newline t
         visible-bell t
         load-prefer-newer t
         ediff-window-setup-function 'ediff-setup-windows-plain
         save-place-file (concat user-emacs-directory "places")
         backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
   #+END_SRC

** Backup
   Backup settings.

   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
         backup-by-copying t    ; Don't delink hardlinks
         version-control t      ; Use version numbers on backups
         delete-old-versions t  ; Automatically delete excess backups
         kept-new-versions 20   ; how many of the newest versions to keep
         kept-old-versions 5    ; and how many of the old
         )

   #+END_SRC

** Evil
   My take on evil is to only provide it in places where vi would have been, i.e. text manipulation in regulars buffers. I’m against trying to add vi for anything else, as it gets counter-productive fairly quick.

   #+BEGIN_SRC emacs-lisp
   (use-package evil
     :init
     (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
     (setq evil-want-keybinding nil)
     :config
     (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
     (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
     (define-key evil-insert-state-map (kbd "C-u")
       (lambda ()
         (interactive)
         (evil-delete (point-at-bol) (point))))
     :config
     (evil-commentary-mode)
     (evil-mode 1)
     :config  ;; This makes evil work betther with visual-line-mode
     (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
     (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
     (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
     (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
     (setq-default evil-cross-lines t)
     :config ;; This revmoes evil-ret and evil-space
     (defun my-move-key (keymap-from keymap-to key)
       "Moves key binding from one keymap to another, deleting from the old location. "
       (define-key keymap-to key (lookup-key keymap-from key))
       (define-key keymap-from key nil))
     (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
     (my-move-key evil-motion-state-map evil-normal-state-map " ")

     (add-to-list 'evil-emacs-state-modes 'dired-mode)) ;; Disable evil in dired


   (use-package evil-surround
     :config
     (global-evil-surround-mode 1))
   #+END_SRC

** Flycheck
   For some reason or another, getting hunspell to play nice with MacOS is apparently quite hellish. Do not copy this part, only bad hacks.

   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :init (global-flycheck-mode)
     :init (add-hook 'css-mode-hook    'flycheck-mode)
     :init (add-hook 'scss-mode-hook   'flycheck-mode)
     :init (add-hook 'html-mode-hook   'flycheck-mode)
     :init (add-hook 'python-mode-hook 'flycheck-mode)

     :config
     (setq-default flycheck-disabled-checkers
                   (append flycheck-disabled-checkers
                           '(javascript-jshint json-jsonlist)))
     ;; Enable eslint checker for web-mode
     (flycheck-add-mode 'javascript-eslint 'web-mode))


   (use-package avy-flycheck
     :config
     (global-set-key (kbd "s-f") #'avy-flycheck-goto-error))


   (use-package flyspell
     :config

     ;; Set $DICPATH to "$HOME/Library/Spelling" for hunspell.
     (setenv
      "DICPATH"
      (concat (getenv "HOME") "/Library/Spelling"))

     (setq flyspell-issue-message-flag nil)

     (setq ispell-hunspell-dict-paths-alist
           '(("en_GB" "~/Library/Spelling/en_GB.aff")
             ("en_US" "~/Library/Spelling/en_US.aff")
             ("american" "~/Library/Spelling/en_US.aff")
             ("british" "~/Library/Spelling/en_US.aff")
             ("swedish" "~/Library/Spelling/sv_SE.aff")
             ("sv_SE" "~/Library/Spelling/sv_SE.aff")))

     (setq ispell-program-name "hunspell")
     (setq ispell-dictionary "british")

     (add-to-list 'ispell-dictionary-alist
                  '("british" "[[:alpha:]]" "[^[:alpha:]]" "'" t ("-d" "en_GB") nil utf-8))
     (add-to-list 'ispell-dictionary-alist
                  '("swedish" "[[:alpha:]]" "[^[:alpha:]]" "'" t ("-d" "sv_SE") nil utf-8)))

   (use-package flyspell-correct-ivy
     :bind ("s-e" . flyspell-correct-wrapper)
     :init
     (setq flyspell-correct-interface #'flyspell-correct-ivy))


   (use-package writegood-mode)
   #+END_SRC

** Company
   Company is probably the best completion framework, that said, I would like to try and replace it with completion.el or dabbrev sometime.

   TODO: Disable company in text mode buffers.

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (add-hook 'after-init-hook 'global-company-mode)
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 3)

       (company-tng-configure-default)
       (company-quickhelp-mode)
       (evil-declare-change-repeat 'company-complete)

       (with-eval-after-load 'company
         (define-key company-active-map (kbd "M-n") nil)
         (define-key company-active-map (kbd "M-p") nil)
         ;; (define-key company-active-map (kbd "<tab>") nil)
         (define-key company-active-map (kbd "C-n") 'company-select-next)
         (define-key company-active-map (kbd "C-p") 'company-select-previous))
       (setq company-frontends
             '(company-tng-frontend
               company-pseudo-tooltip-frontend
               company-echo-metadata-frontend)))
   #+END_SRC

** LSP
   LSP! The almost-out-of-the-box solution for everything. Sometimes great, sometimes horrible. Should try to improve this at a later time.

   #+BEGIN_SRC emacs-lisp
   (use-package lsp-mode
     :commands lsp
     :config
     (add-hook 'shell-script-mode-hook #'lsp)

     (use-package lsp-ui
       :config
       (setq lsp-ui-sideline-ignore-duplicate t)
       (add-hook 'lsp-mode-hook 'lsp-ui-mode))

     (use-package company-lsp
       :config
       (push 'company-lsp company-backends))

     (use-package lsp-haskell
       :config
       ;; (add-hook 'haskell-mode-hook #'lsp)
       (setq lsp-haskell-process-path-hie "~/.local/bin/hie")))
   #+END_SRC

*** DAP
    Does not really work yes, ignore.

    #+BEGIN_SRC emacs-lisp
    (use-package dap-mode
      :config
      (dap-mode 1)
      (require 'dap-python)
      (setq dap-python-executable "/Users/motform/.pyenv/versions/emacs/bin/python")
      (dap-ui-mode 1))
    #+END_SRC

** Prettification
   Not really all to configured yet, should probably be able to fmt on save.

   #+BEGIN_SRC emacs-lisp
   (use-package format-all)
   #+END_SRC

** Languages
   Language specific editing modes.

*** Python
    Almost ashamed to post this, but what to do when MacOS hard-links ’Python’ to a deprecated version? Probably not this, but anyway.

    #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :config
      (elpy-enable)
      (pyenv-mode)
      (setq py-python-command "/Users/motform/.pyenv/versions/emacs/bin/python")
      (setq py-python3-command "/Users/motform/.pyenv/versions/emacs/bin/python")
      (setq elpy-rpc-python-command "/Users/motform/.pyenv/versions/emacs/bin/python")
      (setenv "WORKON_HOME" "~/.local/virtualenvs")
      (setq elpy-rpc-backend "jedi")
      ;; (setq elpy-test-runner "pytest")
      ;; (setq elpy-test-pytest-runner-command "-xv")
      (setq python-shell-interpreter "/Users/motform/.pyenv/versions/emacs/bin/python")
      (setq python-python-command "/Users/motform/.pyenv/versions/emacs/bin/python")
      (setq python-shell-completion-native-enable nil)

      ;; use flycheck not flymake with elpy
      (when (require 'flycheck nil t)
        (use-package flycheck-mypy)
        (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
        (add-hook 'elpy-mode-hook 'flycheck-mode)
        (setq flycheck-python-pylint-executable "pylint3")
        (setq python-check-command "flake8")
        (setq flycheck-python-flake8-executable "flake8"))

      ;; enable autopep8 formatting on save
      (require 'py-autopep8)
      (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
    #+END_SRC

    mypy makes python all pretty with arrows and type hints, but alas, it just never works out.

    #+BEGIN_SRC emacs-lisp
    (use-package flycheck-mypy
      :config
      (flycheck-define-checker
          python-mypy ""
          :command ("mypy"
                    "--ignore-missing-imports"
                    "--python-version" "3.7"
                    source-original)
          :error-patterns
          ((error line-start (file-name) ":" line ": error:" (message) line-end))
          :modes python-mode
          :modes elpy-mode)

      (add-to-list 'flycheck-checkers 'python-mypy t)
      (flycheck-add-next-checker 'python-flake8 'python-mypy t))
    #+END_SRC
    
    pipenv almost makes the Python build story bearable, /almost/.

    #+BEGIN_SRC emacs-lisp
    (use-package pipenv
      :hook (python-mode . pipenv-mode)
      :init
      (setq
       pipenv-projectile-after-switch-function
       #'pipenv-projectile-after-switch-extended))
    #+END_SRC

    #+RESULTS:

*** Haskell
    Intero is turns a compiled language into a dynamic, interpreted one.

    #+BEGIN_SRC emacs-lisp
    (use-package haskell-mode
      :init
      (add-hook 'haskell-mode-hook 'intero-mode)
      :config
      ;; (evil-define-key 'insert 'haskell-mode (kbd "C-S-n") (lambda () (interactive) (insert "->")))
      (intero-global-mode 1)
      (let ((my-cabal-path (expand-file-name "~/.cabal/bin")))
        (setenv "PATH" (concat my-cabal-path path-separator (getenv "PATH")))
        (add-to-list 'exec-path my-cabal-path))

      (use-package hindent
        :config
        (setq hindent-process-path "~/.local/bin/hindent")
        (add-hook 'haskell-mode-hook 'hindent-mode)
        (setq hindent-reformat-buffer-on-save t)

        ;; (add-hook 'haskell-mode-hook
        ;;           (lambda () (electric-indentir-local-mode 0)))
        ))
    #+END_SRC

*** Web
    Web-mode is sometimes good, but at the moment I could probably remove it. Emmet is more general, so that probably stays.

    #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :config
      (defun my-web-mode-hook ()
        "Hooks for Web mode."
        (setq web-mode-markup-indent-offset 2))
      (add-hook 'web-mode-hook  'my-web-mode-hook)
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))

    (use-package emmet-mode
      :config
      (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
      (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
      ;; (define-key emmet-mode-keymap (kbd "s-m") 'emmet-expand-line)
      (setq emmet-move-cursor-between-quotes t)
      (setq emmet-expand-jsx-className? t))
    #+END_SRC

*** SQL
    Did a course on SQL once, and voila. Capitalize should probably be hooked to save.

    #+BEGIN_SRC emacs-lisp
    (use-package sql
      :config
      ;; (font-lock-add-keywords 'sql-mode
      ;;                         '(("foreign" . font-lock-keyword-face)))
      ;; helper function to my-capitalize-all-mysql-keywords
      (defun point-in-comment ()
        (let ((syn (syntax-ppss)))
          (and (nth 8 syn)
               (not (nth 3 syn)))))

      (defun my-capitalize-all-sql-keywords ()
        (interactive)
        (require 'sql)
        (save-excursion
          (dolist (keywords sql-mode-mysql-font-lock-keywords)
            (goto-char (point-min))
            (while (re-search-forward (car keywords) nil t)
              (unless (point-in-comment)
                (goto-char (match-beginning 0))
                (upcase-word 1)))))))
    #+END_SRC

*** ECMAScript
    rsjx instantly turns any react file into a fruit salad.

    #+BEGIN_SRC emacs-lisp
    (use-package js
      :config
      (setq js-indent-level 2))

    (use-package rjsx-mode)
    #+END_SRC

*** Typescript
    Not here yet, but should work.

    #+BEGIN_SRC emacs-lisp
    (use-package tide
      :ensure t
      :after (typescript-mode company flycheck)
      :hook ((typescript-mode . tide-setup)
             (typescript-mode . tide-hl-identifier-mode)
             (before-save . tide-format-before-save)))
    #+END_SRC

*** Clojure
    Rick Hickey appreciation society.

    #+BEGIN_SRC emacs-lisp
    (use-package cider
      :ensure t)
    #+END_SRC

    
*** Scheme
    Felt like SICP, might delete later.

    #+BEGIN_SRC emacs-lisp
    (use-package geiser
      :ensure t)
    #+END_SRC

** Indentation
   Aggresive indent is amazing 95% for the time, and absolutely horrific the rest. Probably still worth it. Also not sure if smart-tabs is really working.

   #+BEGIN_SRC emacs-lisp
   (use-package smart-tabs-mode
     :config
     ;; smart-tabs-insinuate 'c 'javascript 'python)
     (setq-default indent-tabs-mode nil))

   (use-package aggressive-indent
     :config
     (global-aggressive-indent-mode 1)
     (add-to-list 'aggressive-indent-excluded-modes 'html-mode))

   (setq-default truncate-lines t) ;; Line wrapping

   (show-paren-mode 1)
   (setq-default indent-tabs-mode nil)
   #+END_SRC


   There seems to be some occational problems with aggresive-indent, so I’m currently using [[https://github.com/Malabarba/aggressive-indent-mode/issues/112#issuecomment-475108842][yuhan0]]’s fix to limit the amount of timers it swapns.

   #+BEGIN_SRC emacs-lisp
   (defun cancel-aggressive-indent-timers ()
     (interactive)
     (let ((count 0))
       (dolist (timer timer-idle-list)
         (when (eq 'aggressive-indent--indent-if-changed (aref timer 5))
           (incf count)
           (cancel-timer timer))))
     (run-with-timer 60 60 'cancel-aggressive-indent-timers))
   #+END_SRC

   Adaptive-wrap on the other hand is great 100% of the time!

   #+BEGIN_SRC emacs-lisp
   (use-package adaptive-wrap
     :config
     (add-hook 'org-mode 'adaptive-wrap-prefix-mode))
   #+END_SRC

** Undo-tree
   Undo-tree, an amazing idea and a… debatable execution. President undo is effortless in Vi but fundamentally broken here. Only included b/c evil.

   #+BEGIN_SRC emacs-lisp
   (use-package undo-tree
     :config
     (global-undo-tree-mode)
     (setq undo-tree-auto-save-history t)
     (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))
   #+END_SRC

** Quickrun
   Not yet used.

   #+BEGIN_SRC emacs-lisp
   (use-package quickrun)
   #+END_SRC

** yasnippet
   Loaded just in time, every time.

   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :config
     (yas-global-mode 1)
     (define-key ivy-mode-map (kbd "s-k") 'ivy-yasnippet))
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
   (use-package ein)
   #+END_SRC

** Nov.el
   Ebooks in emacs! epub does not look as nice as pdf, but often bring better performence.

   #+BEGIN_SRC emacs-lisp
   (use-package nov
     :config
     (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
     (setq nov-text-width most-positive-fixnum)
     (setq visual-fill-column-center-text t)
     (add-hook 'nov-mode-hook 'visual-line-mode)
     (add-hook 'nov-mode-hook 'visual-fill-column-mode)
     (setq nov-text-width 80))
   #+END_SRC

** Rainbow Delimiters
   Turns the lisp of your choice into a sweet fruit sallad! Most useful in lisps, sligthly annoying in other contexts.
   
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :config
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode ))
   #+END_SRC

** Smartparens
   Keeps parens balanced in both regular arnd lisp modes

   #+BEGIN_SRC emacs-lisp
   (use-package smartparens-config
     :ensure smartparens
     :config
     (provide 'smartparens-setup)
     (setq sp-show-pair-from-inside t)
     (progn (show-smartparens-global-mode t))
     (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)

     :config
     ;; keybindings
     (define-key smartparens-mode-map (kbd "M-<backspace>") 'sp-unwrap-sexp)
     (define-key smartparens-mode-map (kbd "s-<backspace>") 'sp-backward-unwrap-sexp)

     (define-key smartparens-mode-map (kbd "C-q l") 'sp-forward-slurp-sexp)
     (define-key smartparens-mode-map (kbd "C-q s-l") 'sp-forward-barf-sexp)
     (define-key smartparens-mode-map (kbd "C-q h") 'sp-backward-slurp-sexp)
     (define-key smartparens-mode-map (kbd "C-q s-h") 'sp-backward-barf-sexp)

     ;;;;;;;;;;;;;;;;;;
     ;; pair management

     (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
     (bind-key "C-(" 'sp---wrap-with-40 minibuffer-local-map)

     (sp-with-modes 'org-mode
       (sp-local-pair "=" "=" :wrap "C-="))

     (sp-with-modes 'textile-mode
       (sp-local-pair "*" "*")
       (sp-local-pair "_" "_")
       (sp-local-pair "@" "@"))

     (sp-with-modes 'web-mode
       (sp-local-pair "{{#if" "{{/if")
       (sp-local-pair "{{#unless" "{{/unless"))

     ;;; tex-mode latex-mode
     (sp-with-modes '(tex-mode plain-tex-mode latex-mode)
       (sp-local-tag "i" "\"<" "\">"))

     ;;; lisp modes
     (sp-with-modes sp-lisp-modes
       (sp-local-pair "(" nil
                      :wrap "C-("
                      :pre-handlers '(my-add-space-before-sexp-insertion)
                      :post-handlers '(my-add-space-after-sexp-insertion)))

     (defun my-add-space-after-sexp-insertion (id action _context)
       (when (eq action 'insert)
         (save-excursion
           (forward-char (sp-get-pair id :cl-l))
           (when (or (eq (char-syntax (following-char)) ?w)
                     (looking-at (sp--get-opening-regexp)))
             (insert " ")))))

     (defun my-add-space-before-sexp-insertion (id action _context)
       (when (eq action 'insert)
         (save-excursion
           (backward-char (length id))
           (when (or (eq (char-syntax (preceding-char)) ?w)
                     (and (looking-back (sp--get-closing-regexp))
                          (not (eq (char-syntax (preceding-char)) ?'))))
             (insert " "))))))

   (use-package evil-smartparens
     :config
     ;; (require 'evil-smartparens-keybindings)
     (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (defmacro def-pairs (pairs)
     "Define functions for pairing. PAIRS is an alist of (NAME . STRING)
   conses, where NAME is the function name that will be created and
   STRING is a single-character string that marks the opening character.

     (def-pairs ((paren . \"(\")
                 (bracket . \"[\"))

   defines the functions WRAP-WITH-PAREN and WRAP-WITH-BRACKET,
   respectively."
     `(progn
        ,@(loop for (key . val) in pairs
                collect
                `(defun ,(read (concat
                                "wrap-with-"
                                (prin1-to-string key)
                                "s"))
                     (&optional arg)
                   (interactive "p")
                   (sp-wrap-with-pair ,val)))))

   (def-pairs ((paren . "(")
               (bracket . "[")
               (brace . "{")
               (single-quote . "'")
               (underscores . "_")
               (back-tick . "`")
               (front-tick . "´")
               (double-quote . "\"")
               (back-quote . "`")))

   (bind-keys
    :map smartparens-mode-map
    ("C-q ("  . wrap-with-parens)
    ("C-q ["  . wrap-with-brackets)
    ("C-q {"  . wrap-with-braces)
    ("C-q ´"  . wrap-with-front-tick)
    ("C-q `"  . wrap-with-back-tick)
    ("C-q '"  . wrap-with-single-quote)
    ("C-q \"" . wrap-with-double-quotes)
    ("C-q _"  . wrap-with-underscores)
    ("C-q `"  . wrap-with-back-quotes))
   #+END_SRC
   
* Navigation
  Various things that help with navigation in buffers and or Emacs.

** avy
   Aka vim-sneak, but with full-file movement. The keys are mapped to a colemak-home-row.

   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :config
     (setq
      avy-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?e ?i ?o)
      avy-background t)
     (evil-define-key 'normal global-map (kbd "s") #'evil-avy-goto-char)
     (evil-define-key 'normal evil-smartparens-mode-map (kbd "s") #'evil-avy-goto-char))
   #+END_SRC

** ivy
   ivy-swiper-counsel is core to my Emacs. Honestly the last thing I would remove from this config.

   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :diminish (ivy-mode . "")
     :bind
     (:map ivy-mode-map
           ("C-'" . ivy-avy))
     :config
     (ivy-mode 1)
     (setq counsel-grep-base-command
           "rg -i -M 120 --no-heading --line-number --color never %s %s")
     (global-set-key (kbd "M-s") 'counsel-grep)
     (global-set-key (kbd "C-s") 'swiper-isearch)

     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "C-x b") 'ivy--buffer-list)
     (global-set-key (kbd "s-u") 'counsel-unicode-char)
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c C-r") 'ivy-resume)

     (global-set-key (kbd "s-g") 'counsel-org-goto-all)

     (setq ivy-use-virtual-buffers t)
     (setq ivy-height 20) ;; number of result lines to display
     (setq ivy-count-format "") ;; does not count candidates
     (setq ivy-initial-inputs-alist nil) ;; no regexp by default
     (setq ivy-re-builders-alist ;; configure regexp engine.
           ;; allow input not in order
           '((t   . ivy--regex-ignore-order))))
   #+END_SRC


** Buffer Management
   Go back to the previous frame! Sorely needed. Source [[https://emacsredux.com/blog/2013/03/30/go-back-to-previous-window/][Emacs Redux]].

   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x O") (lambda ()
                                   (interactive)
                                   (other-window -1)))
   #+END_SRC

** Eyebrowse
   Like tmux, but better and inside Emacs! Vital to my workflow.

   #+BEGIN_SRC emacs-lisp
   (use-package eyebrowse
     :defer 1
     :init
     (global-unset-key (kbd "C-c C-w"))
     :config
     (progn
       (define-key eyebrowse-mode-map (kbd "s-1") 'eyebrowse-switch-to-window-config-1)
       (define-key eyebrowse-mode-map (kbd "s-2") 'eyebrowse-switch-to-window-config-2)
       (define-key eyebrowse-mode-map (kbd "s-3") 'eyebrowse-switch-to-window-config-3)
       (define-key eyebrowse-mode-map (kbd "s-4") 'eyebrowse-switch-to-window-config-4)
       (define-key eyebrowse-mode-map (kbd "s-5") 'eyebrowse-switch-to-window-config-5)
       (define-key eyebrowse-mode-map (kbd "s-6") 'eyebrowse-switch-to-window-config-6)
       (define-key eyebrowse-mode-map (kbd "s-7") 'eyebrowse-switch-to-window-config-7)
       (define-key eyebrowse-mode-map (kbd "s-8") 'eyebrowse-switch-to-window-config-8)
       (define-key eyebrowse-mode-map (kbd "s-9") 'eyebrowse-switch-to-window-config-9)
       (define-key eyebrowse-mode-map (kbd "s-0") 'eyebrowse-switch-to-window-config-0)
       (eyebrowse-mode t)
       (setq eyebrowse-mode-line-style 'hide)
       (setq eyebrowse-new-workspace t)))


   #+END_SRC

** Projectile
   Should probably look into swapping this out with counsel-git, but not today.

   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :config
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p SPC") 'counsel-projectile)
     (define-key projectile-mode-map (kbd "s-c p SPC") 'counsel-projectile)
     (define-key projectile-mode-map (kbd "s-t") 'counsel-projectile)
     ;; (define-key projectile-mode-map (kbd "s-r") 'er-switch-to-previous-buffer)
     (define-key projectile-mode-map (kbd "s-b") 'counsel-bookmark)
     (define-key projectile-mode-map (kbd "s-p") 'counsel-projectile-switch-project)
     (define-key projectile-mode-map (kbd "s-s") 'counsel-projectile-rg)
     (define-key projectile-mode-map (kbd "s-a") 'ivy-switch-buffer)
     (setq projectile-enable-caching t)
     (projectile-mode +1))
   #+END_SRC

** Dash-at-point
   Endgame is replacing Dash with docs inside of Emacs, but until then.

   #+BEGIN_SRC emacs-lisp
   (use-package dash-at-point
     :config
     (autoload 'dash-at-point "dash-at-point"
       "Search the word at point with Dash." t nil)
     (global-set-key (kbd "s-d") 'dash-at-point)
     (add-to-list 'dash-at-point-mode-alist '(python-mode . "python"))
     (add-to-list 'dash-at-point-mode-alist '(rust-mode . "rust"))
     (add-to-list 'dash-at-point-mode-alist '(haskell-mode . "haskell")))
   #+END_SRC
   
** Which-key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config
     (which-key-mode 1))
   #+END_SRC
* Org
  Manic blend of org settings. To be refactored.

  #+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq
     org-agenda-files '("/Users/motform/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/todo")
     org-src-window-setup 'other-window ;; Better source code window editing
     org-src-fontify-natively t ;; Highlight and indent source code blocks
     org-src-tab-acts-natively t
     org-hide-leading-stars nil
     org-edit-src-content-indentation 0
     org-fontify-quote-and-verse-blocks t ;; Highlight quotes
     org-confirm-babel-evaluate nil ;; Prevent confirmation
     org-hide-emphasis-markers t ;; Hide markers
     org-fontify-whole-heading-line t ;; Fontify whole lines
     org-startup-with-inline-images t) ;; Display images
    :config ;; export
    (defun org-auto-export-on() "auto export to pdf when saving an org file"
           (interactive)
           (when (eq major-mode 'org-mode)
             (add-hook 'after-save-hook 'org-export-pdf-then-open t t)))
    :config ;; tex
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    (setq org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    (setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.11.0/libexec/ditaa-0.11.0-standalone.jar")
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (python . t)
       (ditaa . t)
       (latex . t)))
    :config ;; Babel
    (add-hook
     'org-babel-after-execute-hook
     (lambda ()
       (when org-inline-image-overlays
         (org-redisplay-inline-images))))

    :config ;; prose
    (setq org-catch-invisible-edits 'show-and-error)
    (setq org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+")))
    (setq org-cycle-separator-lines 0)
    (setq olivetti-body-width 100)
    (custom-theme-set-faces
     'user
     '(org-block                 ((t (:inherit fixed-pitch))))
     '(org-table                 ((t (:inherit fixed-pitch))))
     '(org-document-info         ((t (:foreground "dark orange"))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-link                  ((t (:foreground "royal blue" :underline t))))
     '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value        ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))))
  #+END_SRC

** Typo
   A sometimes confusing must-have for any self-respecting typophile.

   #+BEGIN_SRC emacs-lisp
   (use-package typo
     :config
     (typo-global-mode 1)
     (add-hook 'text-mode-hook 'typo-mode))
   #+END_SRC

** Line-spacing
   I sometimes use this when I write longer texts in a proportional font.

   #+BEGIN_SRC emacs-lisp
   (defun xah-toggle-line-spacing ()
     "Toggle line spacing between no extra space to extra half line height.
      URL `http://ergoemacs.org/emacs/emacs_toggle_line_spacing.html'
      Version 2017-06-02"
     (interactive)
     (if line-spacing
         (setq line-spacing nil)
       (setq line-spacing 0.25))
     (redraw-frame (selected-frame)))
   #+END_SRC

** OX
   Should explore this further.

   #+BEGIN_SRC emacs-lisp
   (use-package ox-pandoc)
   #+END_SRC

** Latex
   Sad, and missing acutex for some strange reason.

   #+BEGIN_SRC emacs-lisp
   ;; (use-package latex-preview-pane)
   #+END_SRC

** Doc-view
   Not actually org related, but close enough. A fultile attempt at making PDF look decent.
   #+BEGIN_SRC emacs-lisp
   (setq doc-view-resolution 300) 
   #+END_SRC

* Eshell
  The best shell for the sole reason that it behaves like Emacs. Long-game is to slowly turn it into Plan9 RC.

   #+BEGIN_SRC emacs-lisp
   (use-package eshell
     :config
     (require 'em-smart)
     (add-hook 'eshell-mode-hook (lambda () (eshell-smart-initialize)))
     (setq eshell-where-to-jump 'begin)
     (setq eshell-review-quick-commands nil)
     (setq eshell-smart-space-goes-to-end t)
     (define-key global-map (kbd "s-q") 'eshell-new)

     (add-hook 'eshell-mode-hook
               (lambda ()
                 (define-key eshell-mode-map (kbd "<tab>")
                   (lambda () (interactive) (pcomplete-std-complete)))))

     ;; TODO - new should toggle the eshell buffer
     (defun eshell-new () ;; Make a new eshell buffer
       (interactive)
       ;; (split-window-vertically '30)
       (eshell t)
       (eshell-smart-initialize)))
   (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
   (add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
   #+END_SRC

   Adding xterm-support.

#+BEGIN_SRC emacs-lisp
(use-package xterm-color
  :config
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions))

  (add-hook 'shell-mode-hook
            (lambda ()
              ;; Disable font-locking in this buffer to improve performance
              (font-lock-mode -1)
              ;; Prevent font-locking from being re-enabled in this buffer
              (make-local-variable 'font-lock-function)
              (setq font-lock-function (lambda (_) nil))
              (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))

  ;; Also set TERM accordingly (xterm-256color)
  ;; You can also use it with eshell (and thus get color output from system ls):

  (require 'eshell)

  (add-hook 'eshell-before-prompt-hook
            (lambda ()
              (setq xterm-color-preserve-properties t)))

  (add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
  (setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))

  ;;  Don't forget to setenv TERM xterm-256color

  (setq compilation-environment '("TERM=xterm-256color"))

  (add-hook 'compilation-start-hook
            (lambda (proc)
              ;; We need to differentiate between compilation-mode buffers
              ;; and running as part of comint (which at this point we assume
              ;; has been configured separately for xterm-color)
              (when (eq (process-filter proc) 'compilation-filter)
                ;; This is a process associated with a compilation-mode buffer.
                ;; We may call `xterm-color-filter' before its own filter function.
                (set-process-filter
                 proc
                 (lambda (proc string)
                   (funcall 'compilation-filter proc
                            (xterm-color-filter string)))))))
  )
#+END_SRC

* Magit

  #+BEGIN_SRC emacs-lisp
  (use-package magit)
  #+END_SRC

** Forge

   #+BEGIN_SRC emacs-lisp
   ;; (use-package forge)
   #+END_SRC

** Transident

   #+BEGIN_SRC emacs-lisp
   (use-package transient)
   #+END_SRC

** Evil-magit
   #+BEGIN_SRC emacs-lisp
   (use-package evil-magit
     :config
     (setq evil-magit-use-y-for-yank t))
   #+END_SRC

* Dired
  ~ls~, but you know, Emacs. Sometimes C-x C-d starts with the wrong switches, don’t know what’s up with that.

  #+BEGIN_SRC emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired t
          insert-directory-program "/usr/local/bin/gls"
          dired-listing-switches "-aBhl --group-directories-first"))

  (setq dired-dwim-target t)  ; big norton commander energy

  (defun xah-dired-mode-setup ()
    "to be run as hook for `dired-mode'."
    (dired-hide-details-mode 1))
  (add-hook 'dired-mode-hook 'xah-dired-mode-setup)
  #+END_SRC

** TODO investigate [[https://github.com/Fuco1/dired-hacks/][Dried Hacks]]
* MU4E
  Email for emacs. not working yet

  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
  (require 'mu4e)
  #+END_SRC

* Hydras
  Hydra for window management.

  #+BEGIN_SRC emacs-lisp
  (use-package hydra
    :config
    ;; window management
    (defhydra hydra-window (global-map "M-w")
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("q" hydra-move-splitter-left)
      ("w" hydra-move-splitter-down)
      ("e" hydra-move-splitter-up)
      ("r" hydra-move-splitter-right)
      ("=" balance-windows)
      ("a" ivy-switch-buffer)
      ("f" counsel-projectile)
      ("F" follow-mode)
      ("v" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)))
      ("x" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)))
      ("S" save-buffer)
      ("d" delete-window)
      ("D" delete-other-windows)
      ("z" (progn
             (winner-undo)
             (setq this-command 'winner-undo)))
      ("Z" winner-redo))) 
  #+END_SRC
* Functions
  Random function dump.

  #+BEGIN_SRC emacs-lisp
    (defun kill-other-buffers ()
      "Kill all other buffers."
      (interactive)
      (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
  #+END_SRC

  [[https://stackoverflow.com/questions/384284/how-do-i-rename-an-open-file-in-emacs/37456354#37456354][Source!]]

  #+BEGIN_SRC emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let* ((name (buffer-name))
           (filename (buffer-file-name))
           (basename (file-name-nondirectory filename)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " (file-name-directory filename) basename nil basename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  #+END_SRC
* Custom
  yeeeees

  #+BEGIN_SRC emacs-lisp 
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(Info-quoted ((t (:inherit IBM\ Plex\ Mono))))
   '(font-lock-comment-delimiter-face ((t (:slant italic))))
   '(font-lock-comment-face ((t (:slant italic))))
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-title ((t (:inherit default :weight bold :underline nil))))
   '(org-level-1 ((t (:inherit default :weight bold))))
   '(org-level-2 ((t (:inherit default :weight bold))))
   '(org-level-3 ((t (:inherit default :weight bold))))
   '(org-level-4 ((t (:inherit default :weight bold))))
   '(org-level-5 ((t (:inherit default :weight bold))))
   '(org-level-6 ((t (:inherit default :weight bold))))
   '(org-level-7 ((t (:inherit default :weight bold))))
   '(org-level-8 ((t (:inherit default :weight bold))))
   '(org-link ((t (:foreground "royal blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
   '(whitespace-tab ((t (:foreground "#636363")))))
  (setq whitespace-display-mappings
        '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'


  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ansi-color-names-vector
     ["#f0f0f0" "#e45649" "#50a14f" "#986801" "#4078f2" "#a626a4" "#0184bc" "#1b2229"])
   '(column-number-mode t)
   '(custom-safe-themes
     (quote
      ("fe666e5ac37c2dfcf80074e88b9252c71a22b6f5d2f566df9a7aa4f9bea55ef8" default)))
   '(doom-one-brighter-comments nil)
   '(elpy-modules
     (quote
      (elpy-module-company elpy-module-eldoc elpy-module-pyvenv elpy-module-yasnippet elpy-module-django elpy-module-sane-defaults)))
   '(evil-collection-init nil t)
   '(evil-collection-setup-minibuffer t)
   '(evil-search-module (quote evil-search))
   '(fci-rule-color "#383a42")
   '(haskell-tags-on-save t)
   '(jdee-db-active-breakpoint-face-colors (cons "#f0f0f0" "#4078f2"))
   '(jdee-db-requested-breakpoint-face-colors (cons "#f0f0f0" "#50a14f"))
   '(jdee-db-spec-breakpoint-face-colors (cons "#f0f0f0" "#9ca0a4"))
   '(package-selected-packages
     (quote
      (javascript tide rjsx rsjx rjsx-mode evil-azu anzu volatile-highlights volotile-highlights electric-pair json-mode latex-preview-pane ox-latex adaptive-wrap uniquify dash-at-point auto-compile multiple-cursors-mode writegood-mode format-all rainbow-mode ox-pandoc pdf-tools python-mode evil-mu4e py-autopep8 elpy pyvenv quickrun doom-themes doom-modeline exec-path-from-shell ob-ipython org-babel all-the-icons-dired imenu-anywhere org-bullets org-brain company-quickhelp dap-mode scss-mode flycheck company-lsp company lsp-ui counsel-projectile lsp-mode swiper counsel ivy ace-jump-mode use-package smart-tabs-mode evil-commentary evil-lion evil-visual-mark-mode)))
   '(size-indication-mode nil)
   '(vc-annotate-background "#fafafa")
   '(vc-annotate-color-map
     (list
      (cons 20 "#50a14f")
      (cons 40 "#688e35")
      (cons 60 "#807b1b")
      (cons 80 "#986801")
      (cons 100 "#ae7118")
      (cons 120 "#c37b30")
      (cons 140 "#da8548")
      (cons 160 "#c86566")
      (cons 180 "#b74585")
      (cons 200 "#a626a4")
      (cons 220 "#ba3685")
      (cons 240 "#cf4667")
      (cons 260 "#e45649")
      (cons 280 "#d2685f")
      (cons 300 "#c07b76")
      (cons 320 "#ae8d8d")
      (cons 340 "#383a42")
      (cons 360 "#383a42")))
   '(vc-annotate-very-old-color nil))
  #+END_SRC
  
